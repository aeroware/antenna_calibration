C This subroutine has an alternate entry point given by the ENTRY statement.
C  You MUST remember to change that name also when configuring for a
C  different HPGL plotter!!!!!!!

	SUBROUTINE GD7475_LONG(IFXN,XA,YA)
	DIMENSION XA(8), YA(3)
C
C	GENERIC HP PLOTTER (WITH RS-232C INTERFACE) DRIVER FOR DIGLIB/VAX
C	THIS DRIVER SHOULD HANDLE ALL HPGL SPEAKING PLOTTERS WHEN PROPERLY
C	CONFIGURED.   IT CAN BE USED ON A DEDICATED LINE, OR IN-LINE.
C	 This driver has not be tested since it was modified to work in-line.
C	 However, I have a lot of faith in it, but you all know that a
C	 programmers faith and a buck won't even buy a cup of coffee.
C
C	### THIS DRIVER REQUIRES DIGLIB V3.1H OR LATER ###
C
C************************************************************************
C									*
C	PLOTTER CONFIGURATION PARAMETERS				*
C									*
	PARAMETER (PLOTTER_ID = 7475.0)	!PLOTTER DESIGNATION		*
	PARAMETER (X_WIDTH_CM = 25.0)	!PAPER WIDTH IN CM.		*
	PARAMETER (Y_HEIGHT_CM = 18.0)	!PAPER HEIGHT IN CM.		*
	PARAMETER (X_RESOLUTION = 400.0)!X GRAPHICS UNITS PER CM.	*
	PARAMETER (Y_RESOLUTION = 400.0)!Y GRAPHICS UNITS PER CM.	*
	PARAMETER (NUMBER_FOREGROUND_COLORS = 6.0) !NUMBER OF PENS	*
	PARAMETER (PEN_WIDTH_IN_PLOTTER_UNITS = 15.0) !			*
	LOGICAL AUTO_PAGE_PLOTTER	!				*
	PARAMETER (AUTO_PAGE_PLOTTER = .FALSE.) !NO PAPER ADVANCE	*
	CHARACTER*(*) TERMINAL		!				*
C									*
C	### CONFIGURED FOR DEDICATED RS232 LINE USE ###			*
C		TO CONFIGURE FOR IN-LINE USE, COMMENT OUT NEXT LINE	*
C		AND UNCOMMENT OUT LINE AFTER THAT.			*
C									*
	PARAMETER (TERMINAL='HP7475$TERM') !LOGICAL NAME OF RS-232 LINE	*
C	PARAMETER (TERMINAL='TT:')	!LOGICAL NAME FOR IN-LINE USE	*
C									*
C************************************************************************
C
	BYTE ESC, BCOMMA, BSEMICOLON
	PARAMETER (ESC=27, BCOMMA=',', BSEMICOLON=';')

C
C	DEVICE CONTROL DEFINITIONS
C
	BYTE STR_INIT_DEVICE(30), STR_BEGIN_PLOT(6)
	BYTE STR_COLOR_SET(6)
	BYTE STR_PUT_PEN_AWAY(8), STR_PLOTTER_OFF(4), STR_PLOTTER_ON(4)
	BYTE STR_PEN_UP(4), STR_PEN_DOWN(4)
	DATA STR_INIT_DEVICE /
	1   ESC,'.','@',';','0',':',	!NO HARDWIRED HANDSHAKE
	2   ESC,'.','I','8','1',';',';','1','7',':', !XON/XOFF HANDSHAKE
	3   ESC,'.','N',';','1','9',':', !XON/XOFF HANDSHAKE
	4   'D','F',';',		!SET PLOTTER DEFAULT VALUES
	5   'S','C',2*0 /		!START OF SCALING INSTRUCTION.
	DATA STR_BEGIN_PLOT /
	1   'S','P','1',';',2*0/	!SELECT PEN 1
	DATA STR_COLOR_SET /
	1   'S','P','x',';',2*0 /	!SELECT PEN x
	DATA STR_PUT_PEN_AWAY /
	1   'P','U',';',		!PEN PUP, THEN
	1   'S','P','0',';',0/		!SELECT PEN 0 (PUT PEN AWAY)
	DATA STR_PLOTTER_ON /
	1   ESC,'.','(',0/		!PLOTTER ON
	DATA STR_PLOTTER_OFF /
	1   ESC,'.',')',0/		!PLOTTER OFF
	DATA STR_PEN_UP /
	1   'P','U',';',0/		!PEN UP
	DATA STR_PEN_DOWN /
	1   'P','D',';',0/		!PEN DOWN
C
C	DECLARE BUFFERING FUNCTION TO BE LOGICAL
C
	LOGICAL GB_TEST_FLUSH
C
C	DELCARE VARS NEEDED FOR DRIVER OPERATION
C
	LOGICAL LVECTOR_GOING, LTALL
C
	DIMENSION DCHAR(8)
C
C	MAKE NICE NAMES FOR THE DEVICES RESOLUTION IN X AND Y
C	 ("XGUPCM" IS X GRAPHICS UNITS PER CENTIMETER)
C
	EQUIVALENCE (DCHAR(4),XGUPCM), (DCHAR(5),YGUPCM)
	DATA DCHAR /PLOTTER_ID, X_WIDTH_CM, Y_HEIGHT_CM,
	1   X_RESOLUTION, Y_RESOLUTION, NUMBER_FOREGROUND_COLORS,
	2   24.0, PEN_WIDTH_IN_PLOTTER_UNITS/
C
C-------------------------------------------------------------------------
C
C	REMEMBER THAT WE ARE PLOTTER LONG IF THRU THE TOP
C
	LTALL = .FALSE.
	GO TO 10
C
C	######### ALTERNATE ENTRY POINT ###########
C
	ENTRY GD7475_TALL(IFXN,XA,YA)
	LTALL = .TRUE.
10	CONTINUE
C
C	FIRST VERIFY WE GOT A GRAPHICS FUNCTION WE CAN HANDLE
C
	IF (IFXN .LE. 0 .OR. IFXN .GT. 9) RETURN
C
C	NOW DISPATCH TO THE PROPER CODE TO HANDLE THAT FUNCTION
C
	GO TO (100,200,300,400,500,600,700,800) IFXN
C
C	*********************
C	INITIALIZE THE DEVICE
C	*********************
C
100	CONTINUE
	CALL GB_INITIALIZE(BSEMICOLON,0,TERMINAL,IERR)
	YA(1) = IERR
	IF (IERR .NE. 0) RETURN
	CALL GB_BEGIN_STRING(STR_PLOTTER_ON)
C
	CALL GB_IN_STRING(STR_INIT_DEVICE)
	CALL GDHPGLCONVERT(0,INT(X_RESOLUTION*X_WIDTH_CM))
	CALL GB_INSERT(BCOMMA)
	IY_FULL_SCALE = Y_RESOLUTION*Y_HEIGHT_CM
	CALL GDHPGLCONVERT(0,IY_FULL_SCALE)
	CALL GB_INSERT(BSEMICOLON)
	CALL GB_EMPTY
	RETURN
C
C	**************************
C	GET FRESH PLOTTING SURFACE
C	**************************
C
200	CONTINUE
	CALL GB_NEW_BUFFER
	CALL GB_IN_STRING(STR_PUT_PEN_AWAY)
	CALL GB_EMPTY
	LVECTOR_GOING = .FALSE.
	IF (AUTO_PAGE_PLOTTER) THEN
		CALL GB_IN_STRING(STR_ADVANCE_PAPER)
	    ELSE
		TYPE 299
299		FORMAT(
	1	'$Please place a fresh sheet of paper on the HP Plotter')
		ACCEPT 298, I
298		FORMAT(A1)
	ENDIF
	CALL GB_IN_STRING(STR_BEGIN_PLOT)
	RETURN
C
C	****
C	MOVE
C	****
C
300	CONTINUE
	LVECTOR_GOING = LVECTOR_GOING .AND. (.NOT. GB_TEST_FLUSH(20))
	IF (.NOT. LPEN_UP) THEN
		IF (LVECTOR_GOING) THEN
			CALL GB_INSERT(BSEMICOLON)
			LVECTOR_GOING = .FALSE.
		ENDIF
		CALL GB_IN_STRING(STR_PEN_UP)
		LPEN_UP = .TRUE.
	ENDIF
	GO TO 450
C
C	****
C	DRAW
C	****
C
400	CONTINUE
	LVECTOR_GOING = LVECTOR_GOING .AND. (.NOT. GB_TEST_FLUSH(20))
	IF (LPEN_UP) THEN
		IF (LVECTOR_GOING) THEN
			CALL GB_INSERT(BSEMICOLON)
			LVECTOR_GOING = .FALSE.
		ENDIF
		CALL GB_IN_STRING(STR_PEN_DOWN)
		LPEN_UP = .FALSE.
	ENDIF
450	CONTINUE
	IXPOSN = XGUPCM*XA(1)+0.5
	IYPOSN = YGUPCM*YA(1)+0.5
	IF (LTALL) THEN
C					PLOTTER X = TALL_Y
C					PLOTTER Y = Y_FULL_SCALE - TALL_X
		ITEMP = IXPOSN
		IXPOSN = IYPOSN
		IYPOSN = IY_FULL_SCALE - ITEMP
	ENDIF
	IF (LVECTOR_GOING) THEN
		CALL GB_INSERT(BCOMMA)
	    ELSE
		CALL GB_IN_STRING('PA')
		LVECTOR_GOING = .TRUE.
		CALL GB_USE_TERMINATOR
	ENDIF
	CALL GDHPGLCONVERT(IXPOSN,IYPOSN)
	RETURN
C
C	*****************************
C	FLUSH GRAPHICS COMMAND BUFFER
C	*****************************
C
500	CONTINUE
	LVECTOR_GOING = LVECTOR_GOING .AND. (.NOT. GB_TEST_FLUSH(6))
	IF (LVECTOR_GOING) THEN
		CALL GB_INSERT(BSEMICOLON)
		LVECTOR_GOING = .FALSE.
		CALL GB_NO_TERMINATOR
	ENDIF
	IF (.NOT. LPEN_UP) THEN
		CALL GB_IN_STRING(STR_PEN_UP)
		LPEN_UP = .TRUE.
	ENDIF
	CALL GB_EMPTY
	RETURN
C
C	******************
C	RELEASE THE DEVICE
C	******************
C
600	CONTINUE
	CALL GB_EMPTY
	CALL GB_IN_STRING(STR_PUT_PEN_AWAY)
	CALL GB_IN_STRING('PA')
	CALL GDHPGLCONVERT(INT(X_RESOLUTION*X_WIDTH_CM),
	1   INT(Y_RESOLUTION*Y_HEIGHT_CM))
	CALL GB_INSERT(BSEMICOLON)
	CALL GB_EMPTY
	CALL GB_FINISH(STR_PLOTTER_OFF)
	RETURN
C
C	*****************************
C	RETURN DEVICE CHARACTERISTICS
C	*****************************
C
700	CONTINUE
	DO 720 I=1,8
	XA(I) = DCHAR(I)
720	CONTINUE
	IF (LTALL) THEN
		XA(2) = DCHAR(3)
		XA(3) = DCHAR(2)
		XA(4) = DCHAR(5)
		XA(5) = DCHAR(4)
	ENDIF
	RETURN
C
C	****************************
C	SELECT CURRENT DRAWING COLOR
C	****************************
C
800	CONTINUE
	LVECTOR_GOING = LVECTOR_GOING .AND. (.NOT. GB_TEST_FLUSH(10))
	ICOLOR = XA(1)
	IF (ICOLOR .LE. 0 .OR.
	1   ICOLOR .GT. INT(NUMBER_FOREGROUND_COLORS)) RETURN
	IF (LVECTOR_GOING) THEN
		CALL GB_INSERT(BSEMICOLON)
		LVECTOR_GOING = .FALSE.
		CALL GB_NO_TERMINATOR
	ENDIF
	IF (.NOT. LPEN_UP) THEN
		CALL GB_IN_STRING(STR_PEN_UP)
		LPEN_UP = .TRUE.
	ENDIF
	STR_COLOR_SET(3) = 48+ICOLOR
	CALL GB_IN_STRING(STR_COLOR_SET)
	RETURN
	END
