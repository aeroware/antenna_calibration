	SUBROUTINE GD9400LUT(IFXN,XA,YA)
	DIMENSION XA(8), YA(3)
C
C	RAMTEK 9400 WITH LUT DRIVER FOR DIGLIB/VAX
C		CURRENTLY CONFIGURED FOR 1280x1024 AND TYPE 7A LUT
C
C-----------------------------------------------------------------------
C
	PARAMETER (MAXY=1023)
	CHARACTER*(*) DEVICE_NAME
	PARAMETER (DEVICE_NAME='RAA0:')

C	**********
	INTEGER*2 IOCHAN
	COMMON /GD9400_IO/ IOCHAN
C	**********

	DIMENSION DCHAR(8)

	INTEGER*4 SYS$ASSIGN, SYS$QIOW, SYS$DASSGN
	INTEGER*2 IOCHANTT

	INTEGER*2 INIT_RAMTEK(19), IERASE_RAMTEK
	INTEGER*2 IWRITE_CURSOR(3), IREAD_CURSOR
	INTEGER*2 LOAD_LUT(7)
	BYTE CHARBUFR
C
C	MAKE NICE NAMES FOR THE DEVICES RESOLUTION IN X AND Y
C	 ("XGUPCM" IS X GRAPHICS UNITS PER CENTIMETER)
C
	EQUIVALENCE (DCHAR(4),XGUPCM), (DCHAR(5),YGUPCM)
C
C	DATA WE WILL NEED
C
	DATA DCHAR /9400.9, 32.8285, 26.258, 38.96, 38.96, 255.0, 213.0, 1.0/
	DATA IOREADNOECHO /'00000071'X/
	DATA INIT_RAMTEK /'0600'X, '2700'X, '3300'X, 1, '3400'X, '0300'X, 0,
	1   16, 0, 4095, 3840, 240, 15, 4080, 3855, 255, '0300'X, 0, 0/
	DATA INIT_BYTES /38/
	DATA IERASE_RAMTEK /'2B00'X/
	DATA IERASE_BYTES /2/
	DATA IWRITE_CURSOR /'2C01'X, 320, 256/
	DATA IREAD_CURSOR /'2E01'X/
	DATA IWRITE_BYTES, IREAD_BYTES / 6, 2/
	DATA IOREADLBLK /'00000021'X/
	DATA LOAD_LUT /'0300'X, 0, 0, 0, '0300'X, 0, 0/
	DATA LOAD_LUT_BYTES /14/
C
C	FIRST VERIFY WE GOT A GRAPHICS FUNCTION WE CAN HANDLE
C
	IF (IFXN .LE. 0 .OR. IFXN .GT. 10) RETURN
C
C	NOW DISPATCH TO THE PROPER CODE TO HANDLE THAT FUNCTION
C
	GO TO (100,200,300,300,500,600,700,800,900,1000) IFXN
C
C	*********************
C	INITIALIZE THE DEVICE
C	*********************
C
100	CONTINUE
C
C	FIND THE I/O CHANNAL ASSICIATED WITH THE TERMINAL FOR DOING GINS
C
	ISTAT = SYS$ASSIGN(DEVICE_NAME,IOCHAN,,)
D	TYPE *,'DEVICE NAME ASSIGNMENT STATUS IS ',ISTAT
	IF (.NOT. ISTAT) THEN
		YA(1) = 1.0
		RETURN
	ENDIF
	ISTAT = SYS$ASSIGN('TT',IOCHANTT,,)
D	TYPE *,'ASSIGN STATUS IS ',ISTAT
	IF (.NOT. ISTAT) THEN
		YA(1) = 2.0
		RETURN
	    ELSE
		YA(1) = 0.0
	ENDIF
C
C	INITIALIZE THE RAMTEK
C
	CALL GD94WRITE(INIT_RAMTEK,INIT_BYTES)
190	CALL GD9400_BUFRINIT
	RETURN
C
C	**************************
C	GET FRESH PLOTTING SURFACE
C	**************************
C
200	CONTINUE
C
C	ERASE THE RAMTEK SCREEN AND RETURN TO NORMAL
C
	CALL GD94WRITE(IERASE_RAMTEK, IERASE_BYTES)
	GO TO 190
C
C	*************
C	MOVE AND DRAW
C	*************
C
300	CONTINUE
C
C	CONVERT CM. TO GRAPHICS UNITS ROUNDED
C
	IX = XGUPCM*XA(1) + 0.5
	IY = MAXY - INT(YGUPCM*YA(1) + 0.5)
	IF (IFXN .EQ. 3) THEN
		CALL GD9400_MOVE(IX,IY)
	    ELSE
		CALL GD9400_DRAW(IX,IY)
	ENDIF
	RETURN
C
C	*****************************
C	FLUSH GRAPHICS COMMAND BUFFER
C	*****************************
C
500	CONTINUE
	CALL GD9400_FLUSH
	RETURN
C
C	******************
C	RELEASE THE DEVICE
C	******************
C
600	CONTINUE
C
C	DE-ASSIGN THE CHANNALS
C
	ISTAT = SYS$DASSGN(%VAL(IOCHAN))
	ISTAT = SYS$DASSGN(%VAL(IOCHANTT))
	RETURN
C
C	*****************************
C	RETURN DEVICE CHARACTERISTICS
C	*****************************
C
700	CONTINUE
	DO 720 I=1,8
	XA(I) = DCHAR(I)
720	CONTINUE
	RETURN
C
C	****************************
C	SELECT CURRENT DRAWING COLOR
C	****************************
C
800	CONTINUE
	CALL GD9400_COLOR_SET(INT(XA(1)))
	RETURN
C
C	**********************
C	PERFORM GRAPHICS INPUT
C	**********************
C
900	CONTINUE
	CALL GD9400_FLUSH
C
C	SET VISIBLE BIT TO MAKE CURSOR VISIBLE
C
910	IWRITE_CURSOR(3) = IOR(IWRITE_CURSOR(3),'0400'X)
C
C	BRING UP CURSOR AT LAST KNOWN LOCATION
C
	CALL GD94WRITE(IWRITE_CURSOR, IWRITE_BYTES)
C
C	ASK FOR 1 CHARACTER FROM THE TERMINAL
C
	ISTAT = SYS$QIOW(%VAL(0),%VAL(IOCHANTT),%VAL(IOREADNOECHO),
	1   IOSB, , ,CHARBUFR,%VAL(1), , , , )
	IF (.NOT. ISTAT) STOP 'GD9400 - GIN FAILURE'
C
C	TELL 9400 WE WANT TO READ THE CURSOR
C
	CALL GD94WRITE(IREAD_CURSOR, IREAD_BYTES)
C
C	READ THE CURSOR LOCATION INTO THE "WRITE CURSOR" AREA SO THE NEXT
C	"WRITE CURSOR" WILL PLACE THE CURSOR AT THIS NEW LOCATION.
C
	ISTAT = SYS$QIOW(%VAL(0), %VAL(IOCHAN), %VAL(IOREADLBLK),
	1   IOSB, , ,IWRITE_CURSOR(2), %VAL(4), , , , )
	IF (.NOT. ISTAT) STOP 'GD9400 - RAMTEK READ ERROR'
D	TYPE *,'CURSOR LOCATION ',IWRITE_CURSOR(2), IWRITE_CURSOR(3)
C
C	GET THE KEY, X POSITION, AND Y POSITION
C
	XA(1) = CHARBUFR		!PICK CHARACTER
	IWRITE_CURSOR(2) = IAND(IWRITE_CURSOR(2), '07FF'X)
	IWRITE_CURSOR(3) = IAND(IWRITE_CURSOR(3), '03FF'X)
	XA(2) = FLOAT(IWRITE_CURSOR(2))/XGUPCM	!X IN CENTIMETERS.
	XA(3) = FLOAT(MAXY-IWRITE_CURSOR(3))/YGUPCM	!Y IN CM.
C
C	MAKE THE CURSOR INVISIBLE
C
	CALL GD94WRITE(IWRITE_CURSOR, IWRITE_BYTES)
	RETURN
C
C	**************************
C	SET COLOR USING RGB VALUES
C	**************************
C
1000	LOAD_LUT(2) = XA(1)	!DIGLIB COLOR IS LUT ADDRESS
	LOAD_LUT(3) = 2		!2 BYTES TO SET A SINGLE COLOR
	LOAD_LUT(4) = 256*INT(0.15*YA(1))
	1    + 16*INT(0.15*YA(2)) + INT(0.15*YA(3))
	CALL GD94WRITE(LOAD_LUT,LOAD_LUT_BYTES)
	RETURN
	END
	SUBROUTINE GD9400_MOVE(IX,IY)
C
C	**********
	PARAMETER (IBUFFER_SIZE = 512)
	INTEGER*2 IBUFFER
	LOGICAL LMOVED, LCOLOR_CHANGED
	COMMON /GD9400_MD/ IBUFFER(IBUFFER_SIZE), ICURRENT_COLOR,
	1   IXPOSN, IYPOSN, IBUFFER_POINTER, LMOVED, LCOLOR_CHANGED
C	**********
C
	LMOVED = .TRUE.
	IXPOSN = IX
	IYPOSN = IY
	RETURN
	END
	SUBROUTINE GD9400_DRAW(IX,IY)
C
C	**********
	PARAMETER (IBUFFER_SIZE = 512)
	INTEGER*2 IBUFFER
	LOGICAL LMOVED, LCOLOR_CHANGED
	COMMON /GD9400_MD/ IBUFFER(IBUFFER_SIZE), ICURRENT_COLOR,
	1   IXPOSN, IYPOSN, IBUFFER_POINTER, LMOVED, LCOLOR_CHANGED
C	**********
C
	INTEGER*2 IWVL_AND_OP1, ICOP, ICOP_AND_FOREGROUND
	PARAMETER (IWVL_AND_OP1 = '0E03'X)
	PARAMETER (ICOP = '8000'X)
	PARAMETER (ICOP_AND_FOREGROUND = '8002'X)
	LOGICAL GD9400_FLUSHIF, LDUMMY
C
D	TYPE *,'GD9400_DRAW: IBUFFER_POINTER = ',IBUFFER_POINTER
	IF (LCOLOR_CHANGED .OR. LMOVED .OR. GD9400_FLUSHIF(2)) THEN
	    LDUMMY = GD9400_FLUSHIF(9)
	    IBUFFER(IBUFFER_POINTER) = IWVL_AND_OP1
	    IBUFFER(IBUFFER_POINTER+1) = ICOP_AND_FOREGROUND
	    IBUFFER(IBUFFER_POINTER+2) = ICURRENT_COLOR
	    IBUFFER(IBUFFER_POINTER+3) = IXPOSN
	    IBUFFER(IBUFFER_POINTER+4) = IYPOSN
	    IBUFFER(IBUFFER_POINTER+5) = 0
	    INDEX_NBYTES = IBUFFER_POINTER + 5
	    IBUFFER_POINTER = IBUFFER_POINTER + 6
	    LCOLOR_CHANGED = .FALSE.
	    LMOVED = .FALSE.
	  ENDIF
	IBUFFER(IBUFFER_POINTER) = IX
	IBUFFER(IBUFFER_POINTER+1) = IY
	IBUFFER_POINTER = IBUFFER_POINTER+2
	IXPOSN = IX
	IYPOSN = IY
C
C	COUNT BYTES OF DATA
C
	IBUFFER(INDEX_NBYTES) = IBUFFER(INDEX_NBYTES) + 4
	RETURN
	END
	SUBROUTINE GD9400_COLOR_SET(ICOLOR)
C
C	**********
	PARAMETER (IBUFFER_SIZE = 512)
	INTEGER*2 IBUFFER
	LOGICAL LMOVED, LCOLOR_CHANGED
	COMMON /GD9400_MD/ IBUFFER(IBUFFER_SIZE), ICURRENT_COLOR,
	1   IXPOSN, IYPOSN, IBUFFER_POINTER, LMOVED, LCOLOR_CHANGED
C	**********
C
	IF (ICOLOR .NE. ICURRENT_COLOR) THEN
	    ICURRENT_COLOR = ICOLOR
	    LCOLOR_CHANGED = .TRUE.
	  ENDIF
	RETURN
	END
	FUNCTION GD9400_FLUSHIF(NWORDS)
	LOGICAL GD9400_FLUSHIF
C
C	**********
	PARAMETER (IBUFFER_SIZE = 512)
	INTEGER*2 IBUFFER
	LOGICAL LMOVED, LCOLOR_CHANGED
	COMMON /GD9400_MD/ IBUFFER(IBUFFER_SIZE), ICURRENT_COLOR,
	1   IXPOSN, IYPOSN, IBUFFER_POINTER, LMOVED, LCOLOR_CHANGED
C	**********
C
D	TYPE *,'GD9400_FLUSHIF(',NWORDS,') : IBUFFER_POINTER = ',
	1   IBUFFER_POINTER
	IF ((IBUFFER_SIZE+1-IBUFFER_POINTER) .GE. NWORDS) THEN
	    GD9400_FLUSHIF = .FALSE.
	  ELSE
	    CALL GD9400_FLUSH
	    GD9400_FLUSHIF = .TRUE.
	  ENDIF
	RETURN
	END
	SUBROUTINE GD9400_FLUSH
C
C	**********
	PARAMETER (IBUFFER_SIZE = 512)
	INTEGER*2 IBUFFER
	LOGICAL LMOVED, LCOLOR_CHANGED
	COMMON /GD9400_MD/ IBUFFER(IBUFFER_SIZE), ICURRENT_COLOR,
	1   IXPOSN, IYPOSN, IBUFFER_POINTER, LMOVED, LCOLOR_CHANGED
C	**********
C
	IF (IBUFFER_POINTER .GT. 1) THEN
	    CALL GD94WRITE(IBUFFER,2*(IBUFFER_POINTER-1))
	    IBUFFER_POINTER = 1
	    LMOVED = .TRUE.
	  ENDIF
	RETURN
	END
	SUBROUTINE GD9400_BUFRINIT
C
C	**********
	PARAMETER (IBUFFER_SIZE = 512)
	INTEGER*2 IBUFFER
	LOGICAL LMOVED, LCOLOR_CHANGED
	COMMON /GD9400_MD/ IBUFFER(IBUFFER_SIZE), ICURRENT_COLOR,
	1   IXPOSN, IYPOSN, IBUFFER_POINTER, LMOVED, LCOLOR_CHANGED
C	**********
C
	IBUFFER_POINTER = 1
	LCOLOR_CHANGED = .TRUE.
	ICURRENT_COLOR = 1
	IXPOSN = 0
	IYPOSN = 0
	RETURN
	END
	SUBROUTINE GD94WRITE(BUFFER,NBYTES)
	INTEGER*2 BUFFER(NBYTES/2)
C
C	THIS SUBROUTINE WRITES A BUFFER TO THE RAMTEK.
C
C	**********
	INTEGER*2 IOCHAN
	COMMON /GD9400_IO/ IOCHAN
C	**********
C
	PARAMETER (IOWRITE = '00000020'X)
	INTEGER*2 IOSB(4)
	INTEGER*4 SYS$QIOW
D	TYPE 9999, NBYTES, (BUFFER(I), BUFFER(I), I=1,NBYTES/2)
D9999	FORMAT(' GD9400 WRITE'/' BYTE COUNT IS ',I6/
D	1   128(1X,Z4,'H',4X,O6/))
	ISTAT = SYS$QIOW(%VAL(0),%VAL(IOCHAN),%VAL(IOWRITE),
	1   IOSB, , ,BUFFER,%VAL(NBYTES), , , , )
D	TYPE *,'GD9400 WRITE STATUS IS ',ISTAT
	IF (.NOT. ISTAT) STOP 'GD9400 - WRITE ERROR'
	RETURN
	END
