	SUBROUTINE GDMCRO(IFXN,XA,YA)
	DIMENSION XA(8), YA(3)
C
C	MICROTERM ERGO 301 w/4010 graphics DRIVER FOR DIGLIB/VAX
C		1024 x 780 (4010 resolution) effective
C		hardware mapped to 768 x 245
C
C	Converted from Retro-Graphics driver by Andy Simmons.
C	Refinements by Hal R. Brand and R. A. Saroyan   Jan 85
C
C	GB_Empty puts the terminal to VT100 mode so interactive
C	graphics can be done. 
C	Must put the terminal into Plot-10 mode for each graphical
C	operation.
C
C	The fast method of sending drawing coordinates to the terminal
C	cannot be used (probably because of the switching in and out of
C	plot-10 mode). The slow method of sending coordinates is included
C	here as the subroutine GD_4010_Convert_Slo.
C
C-----------------------------------------------------------------------
C
	EXTERNAL LEN
	BYTE ESC, CSUB, TMODE, GS, CR, FF
	PARAMETER (ESC=27, CSUB=26, TMODE=24, GS=29, CR=13, FF=12)
	parameter (ENTNTV=49, ENTP10=42, EXP10=79, EXNTV=50, ENQ=5)
	CHARACTER*(*) TERMINAL
	PARAMETER (TERMINAL='TT')
C
C	DEFINITIONS FOR DEVICE CONTROL
C
	BYTE STR_BEGIN_PLOT1(6), STR_BEGIN_PLOT2(4)
	BYTE STR_ENTER_PLOT10(6), STR_EXIT_PLOT10(6)
	BYTE STR_END_PLOT(6)
C
	DATA STR_BEGIN_PLOT1 /ESC,'[','2','J',0,0/
	DATA STR_BEGIN_PLOT2 /ESC,FF,2*0/
	DATA STR_ENTER_PLOT10 /ESC,ENTNTV,ESC,ENTP10,2*0/
	DATA STR_EXIT_PLOT10 /ESC,EXP10,ESC,EXNTV,2*0/
	DATA STR_END_PLOT /ESC,'[','2','J',0,0/
	DATA LENGTH_END_PLOT /4/
C
C	DEFINITIONS FOR GIN
C
C	Enter Plot-10 mode and request GIN mode.
C
	BYTE GINBUFR(8), PROMPT(8)
	DATA prompt /ESC,ENTNTV,ESC,ENTP10,esc,csub,2*0/
	DATA IGIN_IN_CHARS /6/		!5 FROM 4010 GIN, PLUS CR
C
C	DECLARE BUFFERING FUNCTION
C
	LOGICAL GB_TEST_FLUSH
C
C	DECLARE VARS NEED FOR DRIVER OPERATION
C
	LOGICAL LVECTOR_GOING
	DIMENSION DCHAR(8)
C
C	MAKE NICE NAMES FOR THE DEVICES RESOLUTION IN X AND Y
C	 ("XGUPCM" IS X GRAPHICS UNITS PER CENTIMETER)
C
	EQUIVALENCE (DCHAR(4),XGUPCM), (DCHAR(5),YGUPCM)
	DATA DCHAR /100.0, 21.001, 15.747, 30.419, 30.419, 1.0, 133.0, 1.0/
C
C*****************
C
C	FIRST VERIFY WE GOT A GRAPHICS FUNCTION WE CAN HANDLE
C
	IF (IFXN .LE. 0 .OR. IFXN .GT. 9) RETURN
C
C	NOW DISPATCH TO THE PROPER CODE TO HANDLE THAT FUNCTION
C
	GO TO (100,200,300,400,500,600,700,800,900) IFXN
C
C	*********************
C	INITIALIZE THE DEVICE
C	*********************
C
100	CONTINUE
C
C	FIRST, INITIALIZE THE BUFFER SUBROUTINES
C
	CALL GB_INITIALIZE(CR,STR_EXIT_PLOT10,TERMINAL,IERR)
	YA(1) = IERR
	LVECTOR_GOING = .FALSE.
	RETURN
C
C	**************************
C	GET FRESH PLOTTING SURFACE
C	**************************
C
200	CONTINUE
	CALL GB_EMPTY
	CALL GB_IN_STRING(STR_BEGIN_PLOT1)
	CALL GB_IN_STRING(STR_ENTER_PLOT10)
	CALL GB_IN_STRING(STR_BEGIN_PLOT2)
	CALL GB_EMPTY
	LVECTOR_GOING = .FALSE.
	RETURN
C
C	****
C	MOVE
C	****
C
300	CONTINUE
C	CONVERT CM. TO GRAPHICS UNITS ROUNDED
	IXPOSN = XGUPCM*XA(1)+0.5
	IYPOSN = YGUPCM*YA(1)+0.5
	LVECTOR_GOING = .FALSE.
	RETURN
C
C	****
C	DRAW
C	****
C
400	CONTINUE
	IX = XGUPCM*XA(1)+0.5
	IY = YGUPCM*YA(1)+0.5
C
C	MAKE SURE BUFFER SPACE AVAILABLE AND IN GRAPHICS MODE
C
	IF (LVECTOR_GOING) THEN
		IF (GB_TEST_FLUSH(4)) THEN
			CALL GB_IN_STRING(STR_ENTER_PLOT10)
			LVECTOR_GOING = .FALSE.
		ENDIF
	    ELSE
		CALL GB_TEST_FLUSH(20)
		CALL GB_IN_STRING(STR_ENTER_PLOT10)
		LVECTOR_GOING = .FALSE.
	ENDIF
	IF (LVECTOR_GOING) GO TO 410
	LVECTOR_GOING = .TRUE.
	CALL GB_INSERT(GS)
	CALL GB_USE_TERMINATOR
	CALL GD_4010_Convert_Slo((8*IXPOSN/5),(13*IYPOSN)/8)
410	CALL GD_4010_Convert_Slo((8*IX/5),(13*IY)/8)
	IXPOSN = IX
	IYPOSN = IY
	RETURN
C
C	*****************************
C	FLUSH GRAPHICS COMMAND BUFFER
C	*****************************
C
500	CONTINUE
	CALL GB_EMPTY
	LVECTOR_GOING = .FALSE.
	CALL GB_SEND_CHARS(STR_END_PLOT,LENGTH_END_PLOT)
	RETURN
C
C	******************
C	RELEASE THE DEVICE
C	******************
C
600	CONTINUE
C
C	DE-ASSIGN THE CHANNAL
C
	CALL GB_FINISH(0)
	RETURN
C
C	*****************************
C	RETURN DEVICE CHARACTERISTICS
C	*****************************
C
700	CONTINUE
	DO 720 I=1,8
	XA(I) = DCHAR(I)
720	CONTINUE
	RETURN
C
C	****************************
C	SELECT CURRENT DRAWING COLOR
C	****************************
C
 800	CONTINUE
c	LDUMMY = GB_TEST_FLUSH(8)
c	ICOLOR = XA(1)
c	IF (ICOLOR .LT. 0 .OR. ICOLOR .GT. 1) RETURN
c	ICOLOR = 1-ICOLOR		!CONVERT 1 TO 0 AND 0 INTO 1
c	STR_COLOR_SET(4) = 48+ICOLOR	!MAKE ASCII CHARACTER 0 OR 1
c	CALL GB_IN_STRING(STR_COLOR_SET)
c	CALL GB_USE_TERMINATOR
c	LVECTOR_GOING = .FALSE.
	RETURN
C
C	**********************
C	PERFORM GRAPHICS INPUT
C	**********************
C
 900	CONTINUE
	CALL GB_EMPTY
	LVECTOR_GOING = .FALSE.
C
	CALL GB_EMPTY
	CALL GB_GIN(PROMPT,IGIN_IN_CHARS,.TRUE.,GINBUFR)
	CALL GB_INSERT(CR)
	CALL GB_EMPTY
C
	ICHAR = GINBUFR(1)
	IX1 = GINBUFR(2)
	IX2 = GINBUFR(3)
	IY1 = GINBUFR(4)
	IY2 = GINBUFR(5)
C
	XA(1) = IAND(ICHAR,127)		!PICK CHARACTER
	XA(2) = (5.0*(32*IAND(IX1,31)+IAND(IX2,31))/8.0)/XGUPCM
	XA(3) = (8.0*(32*IAND(IY1,31)+IAND(IY2,31))/13.0)/YGUPCM
C
	RETURN
	END


	SUBROUTINE GD_4010_Convert_SLO(IX,IY)
C
C	THIS SUBROUTINE CONVERTS THE POINT (IX,IY) INTO THE 4010 SCHEME
C	OF ENCODING COORDINATES
C
	CALL GB_INSERT(32+IY/32)
	CALL GB_INSERT(96+IAND(IY,31))
	CALL GB_INSERT(32+IX/32)
	CALL GB_INSERT(64+IAND(IX,31))

	RETURN
	END
