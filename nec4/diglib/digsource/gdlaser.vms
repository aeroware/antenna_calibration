	SUBROUTINE GDLASER_WIDE(IFXN,XA,YA)
	DIMENSION XA(8), YA(3)
C
C	QMS 1200 LASER PRINTER DRIVER - MULTIPLE COMMANDS ON A SINGLE LINE
C
C-----------------------------------------------------------------------
C
C	DECLARE VARS NEED FOR DRIVER OPERATION
C
	LOGICAL*1 L_NOTHING_PLOTTED, L_WIDE
	BYTE COORD(12)
C
	DIMENSION DCHAR(8)
C
C	MAKE NICE NAMES FOR THE DEVICES RESOLUTION IN X AND Y
C	 ("XGUPCM" IS X GRAPHICS UNITS PER CENTIMETER)
C
	EQUIVALENCE (DCHAR(4),XGUPCM), (DCHAR(5),YGUPCM)
	DATA DCHAR /1200.0, 26.67, 19.685, 118.11, 118.11, 1.0, 27.0, 3.0/
C
	L_WIDE = .TRUE.
10	CONTINUE
C
C*****************
C
C	FIRST VERIFY WE GOT A GRAPHICS FUNCTION WE CAN HANDLE
C
	IF (IFXN .LE. 0 .OR. IFXN .GT. 7) RETURN
C
C	NOW DISPATCH TO THE PROPER CODE TO HANDLE THAT FUNCTION
C
	GO TO (100,200,300,400,500,600,700) IFXN
C
C	*********************
C	INITIALIZE THE DEVICE
C	*********************
C
100	CONTINUE
	LUN = XA(1)
	OPEN (UNIT=LUN,NAME='SYS$SCRATCH:LASER.DIG',TYPE='NEW',
	1   CARRIAGECONTROL='LIST',ERR=9000)
C
C	SHOW INITIALIZATION WORKED, I.E. WE OPENED THE FILE.
C
	YA(1) = 0.0
	WRITE (LUN,101)
101	FORMAT('^PY^-'/'^F'/'^IGV'/'^PW03')
190	CONTINUE
	CALL GDLSR_OPEN_BUFR(LUN)
	L_NOTHING_PLOTTED = .TRUE.
	L_PEN_IS_UP = .FALSE.
	RETURN
C
C	**************************
C	GET FRESH PLOTTING SURFACE
C	**************************
C
200	CONTINUE
	IF (L_NOTHING_PLOTTED) RETURN
	CALL GDLSR_DUMP_BUFR
	WRITE (LUN,201)
201	FORMAT('^,')
	GO TO 190
C
C	****
C	MOVE
C	****
C
300	CONTINUE
	IF (L_PEN_IS_UP) GO TO 450
	L_PEN_IS_UP = .TRUE.
	CALL GDLSR_INSERT('^U')
	GO TO 450
C
C	****
C	DRAW
C	****
C
400	CONTINUE
	IF (.NOT. L_PEN_IS_UP) GO TO 450
	CALL GDLSR_INSERT('^D')
	L_PEN_IS_UP = .FALSE.
450	CONTINUE
	IF (L_WIDE) THEN
		IX = (10.0*XGUPCM*XA(1)/3.0)+0.5
		IY = (10.0*YGUPCM*(DCHAR(3)-YA(1))/3.0)+0.5
	    ELSE
		IX = (10.0*XGUPCM*YA(1)/3.0) + 0.5
		IY = (10.0*YGUPCM*XA(1)/3.0) + 0.5
	ENDIF
	ENCODE (11,451,COORD) IX,IY
451	FORMAT(I5,':',I5)
	DO 460 I=1,11
		IF (COORD(I) .EQ. 32) COORD(I) = 48
460		CONTINUE
	COORD(12) = 0
	CALL GDLSR_INSERT(COORD)
	L_NOTHING_PLOTTED = .FALSE.
	RETURN
C
C	*****************************
C	FLUSH GRAPHICS COMMAND BUFFER
C	*****************************
C
500	CONTINUE
	RETURN		!DONE BY BGNPLT WHEN NECESSARY.
C
C	******************
C	RELEASE THE DEVICE
C	******************
C
600	CONTINUE
	CALL GDLSR_DUMP_BUFR
	IF (.NOT. L_NOTHING_PLOTTED) WRITE (LUN,602)
602	FORMAT('^,')
	WRITE (LUN,601)
601	FORMAT('^IGE'/'^O'/'^PN^-')
	CLOSE (UNIT=LUN)
	ISTATUS = LIB$SPAWN('$ DIGLASEROUT SYS$SCRATCH:LASER.DIG')
	RETURN
C
C	*****************************
C	RETURN DEVICE CHARACTERISTICS
C	*****************************
C
700	CONTINUE
	DO 720 I=1,8
	XA(I) = DCHAR(I)
720	CONTINUE
	IF (.NOT. L_WIDE) THEN
		XA(2) = DCHAR(3)
		XA(3) = DCHAR(2)
	ENDIF
	RETURN
C
C	HANDLE FILE OPEN ERROR
C
9000	CONTINUE
	YA(1) = 3.0
	RETURN
C
C	***********************************************************
C
	ENTRY GDLASER_TALL(IFXN,XA,YA)
	L_WIDE = .FALSE.
	GO TO 10
	END


	SUBROUTINE GDLSR_OPEN_BUFR(LUN)
C
	PARAMETER (IBUFR_SIZE = 120)
	BYTE BUFFER
	COMMON /GDLSR/ NXTCHR, LUNOUT, BUFFER(IBUFR_SIZE)
C
	LUNOUT = LUN
	NXTCHR = 1
	RETURN
	END


	SUBROUTINE GDLSR_INIT_BUFR
C
	PARAMETER (IBUFR_SIZE = 120)
	BYTE BUFFER
	COMMON /GDLSR/ NXTCHR, LUNOUT, BUFFER(IBUFR_SIZE)
C
	NXTCHR = 1
	RETURN
	END


	SUBROUTINE GDLSR_INSERT(STRING)
	BYTE STRING(2)
C
	PARAMETER (IBUFR_SIZE = 120)
	BYTE BUFFER
	COMMON /GDLSR/ NXTCHR, LUNOUT, BUFFER(IBUFR_SIZE)
C
	EXTERNAL LEN
C
	L = LEN(STRING)
	IF ((NXTCHR+L) .GT. IBUFR_SIZE) CALL GDLSR_DUMP_BUFR
		DO 100 I = 1, L
		BUFFER(NXTCHR) = STRING(I)
		NXTCHR = NXTCHR + 1
100		CONTINUE
	RETURN
	END

	SUBROUTINE GDLSR_DUMP_BUFR
C
	PARAMETER (IBUFR_SIZE = 120)
	BYTE BUFFER
	COMMON /GDLSR/ NXTCHR, LUNOUT, BUFFER(IBUFR_SIZE)
C
	IF (NXTCHR .EQ. 1) RETURN
	WRITE (LUNOUT,11) (BUFFER(I), I=1,NXTCHR-1)
11	FORMAT(132A1)
	NXTCHR = 1
	RETURN
	END
