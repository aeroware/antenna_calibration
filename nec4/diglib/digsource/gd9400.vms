	SUBROUTINE GD9400(IFXN,XA,YA)
	DIMENSION XA(8), YA(3)
C
C	RAMTEK 9400 (WITHOUT LUT) DRIVER FOR DIGLIB/VAX
C		CURRENTLY CONFIGURED FOR 640X512
C
C-----------------------------------------------------------------------
C
	PARAMETER (MAXY=511)
	PARAMETER (IBUFFER_SIZE=256)
	CHARACTER*(*) DEVICE_NAME
	PARAMETER (DEVICE_NAME='_RAM0:')
	INTEGER*2 IWVL_AND_OP1, IWVL_PLAIN, ICOP_AND_FOREGROUND
	PARAMETER (IWVL_AND_OP1 = '0E03'X)
	PARAMETER (IWVL_PLAIN = '0E01'X)
	PARAMETER (ICOP_AND_FOREGROUND = '8002'X)
	DIMENSION DCHAR(8)
	INTEGER*4 SYS$ASSIGN, SYS$QIOW, SYS$DASSGN
	INTEGER*2 IOCHANTT, IX, IY, ICURRENT_COLOR, ICOLOR_MAP(0:7)
	INTEGER*2 BUFFER(IBUFFER_SIZE), IOCHAN
	INTEGER*2 INIT_RAMTEK(4), IERASE_RAMTEK
	INTEGER*2 IWRITE_CURSOR(3), IREAD_CURSOR
	LOGICAL*2 LMOVED
	BYTE CHARBUFR
	SAVE DCHAR, IOREADNOECHO
	SAVE IOCHAN, IOCHANTT, BUFFER, IBUFFER_POINTER, INITIAL_POINTER
	SAVE ICOLOR_MAP, ICURRENT_COLOR, IXPOSN, IYPOSN, LMOVED
	SAVE INIT_RAMTEK, INIT_BYTES, IERASE_RAMTEK, IERASE_BYTES
	SAVE IWRITE_CURSOR, IREAD_CURSOR, IOREADLBLK
C
C	MAKE NICE NAMES FOR THE DEVICES RESOLUTION IN X AND Y
C	 ("XGUPCM" IS X GRAPHICS UNITS PER CENTIMETER)
C
	EQUIVALENCE (DCHAR(4),XGUPCM), (DCHAR(5),YGUPCM)
C
C	DATA WE WILL NEED
C
	DATA DCHAR /9400.0, 32.803, 26.232, 19.48, 19.48, 15.0, 149.0, 1.0/
	DATA ICOLOR_MAP / 0, 7, 1, 2, 4, 3, 5, 6 /
	DATA IOREADNOECHO /'00000071'X/
	DATA INIT_RAMTEK /'0600'X, '3300'X, 1, '3400'X/
	DATA INIT_BYTES /8/
	DATA IERASE_RAMTEK /'0900'X/
	DATA IERASE_BYTES /2/
	DATA IWRITE_CURSOR /'2C00'X, 320, 256/
	DATA IREAD_CURSOR /'2E00'X/
	DATA IWRITE_BYTES, IREAD_BYTES / 6, 2/
	DATA IOREADLBLK /'00000021'X/
C
C	FIRST VERIFY WE GOT A GRAPHICS FUNCTION WE CAN HANDLE
C
	IF (IFXN .LE. 0 .OR. IFXN .GT. 9) RETURN
C
C	NOW DISPATCH TO THE PROPER CODE TO HANDLE THAT FUNCTION
C
	GO TO (100,200,300,400,500,600,700,800,900) IFXN
C
C	*********************
C	INITIALIZE THE DEVICE
C	*********************
C
100	CONTINUE
C
C	FIND THE I/O CHANNAL ASSICIATED WITH THE TERMINAL FOR DOING GINS
C
	ISTAT = SYS$ASSIGN(DEVICE_NAME,IOCHAN,,)
D	TYPE *,'DEVICE NAME ASSIGNMENT STATUS IS ',ISTAT
	IF (.NOT. ISTAT) THEN
		YA(1) = 1.0
		RETURN
	ENDIF
	ISTAT = SYS$ASSIGN('TT',IOCHANTT,,)
D	TYPE *,'ASSIGN STATUS IS ',ISTAT
	IF (.NOT. ISTAT) THEN
		YA(1) = 2.0
		RETURN
	    ELSE
		YA(1) = 0.0
	ENDIF
C
C	INITIALIZE THE RAMTEK
C
	CALL GD94WRITE(INIT_RAMTEK,INIT_BYTES,IOCHAN)
190	ICURRENT_COLOR = ICOLOR_MAP(1)
	LMOVED = .TRUE.
	IBUFFER_POINTER = 1
	RETURN
C
C	**************************
C	GET FRESH PLOTTING SURFACE
C	**************************
C
200	CONTINUE
C
C	ERASE THE RAMTEK SCREEN AND RETURN TO NORMAL
C
	CALL GD94WRITE(IERASE_RAMTEK, IERASE_BYTES, IOCHAN)
	GO TO 190
C
C	****
C	MOVE
C	****
C
300	CONTINUE
C	CONVERT CM. TO GRAPHICS UNITS ROUNDED
	IXPOSN = XGUPCM*XA(1)+0.5
	IYPOSN = MAXY - INT(YGUPCM*YA(1)+0.5)
	LMOVED = .TRUE.
	RETURN
C
C	****
C	DRAW
C	****
C
400	CONTINUE
	IX = XGUPCM*XA(1)+0.5
	IY = MAXY - INT(YGUPCM*YA(1)+0.5)
	IF (.NOT. LMOVED) GO TO 450
	IF (IBUFFER_POINTER .LT. (IBUFFER_SIZE-10)) GO TO 420
	CALL GD94WRITE(BUFFER,2*(IBUFFER_POINTER-1),IOCHAN)
	IBUFFER_POINTER = 1
420	BUFFER(IBUFFER_POINTER) = IWVL_AND_OP1
	BUFFER(IBUFFER_POINTER+1) = ICOP_AND_FOREGROUND
	BUFFER(IBUFFER_POINTER+2) = ICURRENT_COLOR
	BUFFER(IBUFFER_POINTER+3) = IXPOSN
	BUFFER(IBUFFER_POINTER+4) = IYPOSN
	BUFFER(IBUFFER_POINTER+5) = 0
	INDEX_NBYTES = IBUFFER_POINTER + 5
	IBUFFER_POINTER = IBUFFER_POINTER + 6
	LMOVED = .FALSE.
	GO TO 460
450	IF (IBUFFER_POINTER .LE. (IBUFFER_SIZE-2)) GO TO 460
	CALL GD94WRITE(BUFFER,2*(IBUFFER_POINTER-1),IOCHAN)
	IBUFFER_POINTER = 3
	BUFFER(1) = IWVL_PLAIN
	BUFFER(2) = 0
	INDEX_NBYTES = 2
460	BUFFER(IBUFFER_POINTER) = IX
	BUFFER(IBUFFER_POINTER+1) = IY
	IBUFFER_POINTER = IBUFFER_POINTER+2
	IXPOSN = IX
	IYPOSN = IY
C
C	COUNT BYTES OF DATA
C
	BUFFER(INDEX_NBYTES) = BUFFER(INDEX_NBYTES) + 4
	RETURN
C
C	*****************************
C	FLUSH GRAPHICS COMMAND BUFFER
C	*****************************
C
500	CONTINUE
	IF (IBUFFER_POINTER .EQ. 1) RETURN
	CALL GD94WRITE(BUFFER,2*(IBUFFER_POINTER-1),IOCHAN)
	IBUFFER_POINTER = 1
	LMOVED = .TRUE.
	RETURN
C
C	******************
C	RELEASE THE DEVICE
C	******************
C
600	CONTINUE
C
C	DE-ASSIGN THE CHANNALS
C
	ISTAT = SYS$DASSGN(%VAL(IOCHAN))
	ISTAT = SYS$DASSGN(%VAL(IOCHANTT))
	RETURN
C
C	*****************************
C	RETURN DEVICE CHARACTERISTICS
C	*****************************
C
700	CONTINUE
	DO 720 I=1,8
	XA(I) = DCHAR(I)
720	CONTINUE
	RETURN
C
C	****************************
C	SELECT CURRENT DRAWING COLOR
C	****************************
C
800	CONTINUE
	ICOLOR = ICOLOR_MAP(INT(XA(1)))
	IF (ICOLOR .EQ. ICURRENT_COLOR) RETURN
	ICURRENT_COLOR = ICOLOR
	LMOVED = .TRUE.
	RETURN
C
C	**********************
C	PERFORM GRAPHICS INPUT
C	**********************
C
900	CONTINUE
	IF (IBUFFER_POINTER .EQ. 1) GO TO 910
	CALL GD94WRITE(BUFFER,2*(IBUFFER_POINTER-1),IOCHAN)
	IBUFFER_POINTER = 1
	LMOVED = .TRUE.
C
C	SET VISIBLE BIT TO MAKE CURSOR VISIBLE
C
910	IWRITE_CURSOR(3) = IOR(IWRITE_CURSOR(3),'0400'X)
C
C	BRING UP CURSOR AT LAST KNOWN LOCATION
C
	CALL GD94WRITE(IWRITE_CURSOR, IWRITE_BYTES, IOCHAN)
C
C	ASK FOR 1 CHARACTER FROM THE TERMINAL
C
	ISTAT = SYS$QIOW(%VAL(0),%VAL(IOCHANTT),%VAL(IOREADNOECHO),
	1   IOSB, , ,CHARBUFR,%VAL(1), , , , )
	IF (.NOT. ISTAT) STOP 'GD9400 - GIN FAILURE'
C
C	TELL 9400 WE WANT TO READ THE CURSOR
C
	CALL GD94WRITE(IREAD_CURSOR, IREAD_BYTES, IOCHAN)
C
C	READ THE CURSOR LOCATION INTO THE "WRITE CURSOR" AREA SO THE NEXT
C	"WRITE CURSOR" WILL PLACE THE CURSOR AT THIS NEW LOCATION.
C
	ISTAT = SYS$QIOW(%VAL(0), %VAL(IOCHAN), %VAL(IOREADLBLK),
	1   IOSB, , ,IWRITE_CURSOR(2), %VAL(4), , , , )
	IF (.NOT. ISTAT) STOP 'GD9400 - RAMTEK READ ERROR'
D	TYPE *,'CURSOR LOCATION ',IWRITE_CURSOR(2), IWRITE_CURSOR(3)
C
C	GET THE KEY, X POSITION, AND Y POSITION
C
	XA(1) = CHARBUFR		!PICK CHARACTER
	IWRITE_CURSOR(2) = IAND(IWRITE_CURSOR(2), '07FF'X)
	IWRITE_CURSOR(3) = IAND(IWRITE_CURSOR(3), '03FF'X)
	XA(2) = FLOAT(IWRITE_CURSOR(2))/XGUPCM	!X IN CENTIMETERS.
	XA(3) = FLOAT(MAXY-IWRITE_CURSOR(3))/YGUPCM	!Y IN CM.
C
C	MAKE THE CURSOR INVISIBLE
C
	CALL GD94WRITE(IWRITE_CURSOR, IWRITE_BYTES, IOCHAN)
	RETURN
	END
	SUBROUTINE GD94WRITE(BUFFER,NBYTES,IOCHAN)
C
C	THIS SUBROUTINE EMPTYS THE BUFFER IF IT HAS ANYTHING
C
	INTEGER*2 BUFFER(NBYTES/2)
	INTEGER*2 IOSB(4)
	INTEGER*4 SYS$QIOW
	SAVE IOWRITE
	DATA IOWRITE /'00000020'X/
D	TYPE 9999, NBYTES, (BUFFER(I), BUFFER(I), I=1,NBYTES/2)
D9999	FORMAT(' GD9400WRITE'/' BYTE COUNT IS ',I6/
D	1   128(1X,Z4,'H',4X,O6/))
	ISTAT = SYS$QIOW(%VAL(0),%VAL(IOCHAN),%VAL(IOWRITE),
	1   IOSB, , ,BUFFER,%VAL(NBYTES), , , , )
D	TYPE *,'GD9400 WRITE STATUS IS ',ISTAT
	IF (.NOT. ISTAT) STOP 'GD9400 - WRITE ERROR'
	RETURN
	END

