	SUBROUTINE GDVHR19(IFXN,XA,YA)
	DIMENSION XA(8), YA(3)
C
C	INTECOLOR VHR-19 DRIVER FOR DIGLIB/VAX
C	   Drawing is done via the TEK 4010 compatability mode since this
C	   provides a much more dense (and so faster) coordinate stream.
C	   The terminal itself is placed in the ANSI mode.   It is switched
C	   temporarily to TEK mode only for the duration of a buffer (or
C	   less) of lines.
C
	BYTE ESC, CSUB, GS, CR, FF, US, BCOMMA
	PARAMETER (ESC=27, CSUB=26, GS=29, CR=13, FF=12, US=31, BCOMMA=44)
	CHARACTER*(*) TERMINAL
	PARAMETER (TERMINAL='TT')
C
C	DEFINITIONS FOR DEVICE CONTROL
C
	BYTE STR_END(4)
	BYTE STR_INIT_DEV(38)
	BYTE STR_BEGIN_PLOT(6), STR_COLOR_SET(8), STR_START_VECTOR(4)
	BYTE STR_POLYGON_START(8), STR_POLYGON_PATTERN(4)
	BYTE STR_COMMA_END(4), STR_END_PLOT(10)
	BYTE STRING(20)
	EXTERNAL LEN
C
	DATA STR_END /ESC,'A',2*0/
	DATA STR_INIT_DEV/
	1   ESC,'B',ESC,'T',
	1   'Z',',','1',',',		!ZOOM FACTOR OF 1
	2   'N',',','1','0','2','3',',','7',',', !PAN TO BOTTOM LEFT
	3   'I','H',',','7',',',	!STD COLORS, COLOR 1 (INTECOLOR 7)
	4   'T','F','F','F','F',',',	!LINE STYLE SOLID
	5   '#',',','7',',',		!WRITE TO ALL 3 PLANES
	6   'L',',','7',',','?',0/	!DISPLAY FROM ALL 3 PLANES, EXIT
	DATA STR_BEGIN_PLOT/
	1   ESC,'C',ESC,FF,0,0/		!ERASE SCREEN
	DATA STR_START_VECTOR/
	1   ESC,'C',GS,0/		!START A 4010 VECTOR
	DATA STR_END_PLOT /
	1   ESC,'A',
	2   ESC,'[','H',ESC,'[','J',2*0/!ERASE TEXT
	DATA STR_COLOR_SET /
	1   ESC,'B',ESC,'T','H',',',2*0/!SET COLOR PARTIAL COMMAND
	DATA STR_POLYGON_START/
	1   ESC,'B',ESC,'T','D',',',2*0/!START POLYGON
	DATA STR_POLYGON_PATTERN/
	1   ',','2',',',0/
	DATA STR_COMMA_END/
	1   ',','?',2*0/		!ENDS A COMMAND AND EXIT GRAPHICS MODE.
C
C	DEFINITIONS FOR GIN
C
	BYTE GINBUFR(8), PROMPT(6), STR_END_GIN(2)
	DATA PROMPT /ESC, 'C', ESC, CSUB, 0, 0/
	DATA IGIN_IN_CHARS /6/
	DATA STR_END_GIN /10,0/
C
C	COLOR MAP
C
	DIMENSION MAP_COLOR(8)
	DATA MAP_COLOR /0,7,1,2,4,3,5,6/
C
C	DECLARE BUFFERING FUNCTION
C
	LOGICAL GB_TEST_FLUSH
C
C	DECLARE VARS NEED FOR DRIVER OPERATION
C
	LOGICAL LVECTOR_GOING, LDUMMY
	DIMENSION DCHAR(8)
C
C	MAKE NICE NAMES FOR THE DEVICES RESOLUTION IN X AND Y
C	 ("XGUPCM" IS X GRAPHICS UNITS PER CENTIMETER)
C
	EQUIVALENCE (DCHAR(4),XGUPCM), (DCHAR(5),YGUPCM)
	DATA DCHAR /19.0, 38.0, 28.5, 26.921, 26.921, 7.0, 389.0, 1.0/
C
C*****************
C
C	FIRST VERIFY WE GOT A GRAPHICS FUNCTION WE CAN HANDLE
C
	IF (IFXN .GT. 1026) GOTO 20000
	IF (IFXN .LE. 0 .OR. IFXN .GT. 9) RETURN
C
C	NOW DISPATCH TO THE PROPER CODE TO HANDLE THAT FUNCTION
C
	GO TO (100,200,300,400,500,600,700,800,900) IFXN
C
C	*********************
C	INITIALIZE THE DEVICE
C	*********************
C
100	CONTINUE
C
C	FIRST, INITIALIZE THE BUFFER SUBROUTINES
C
	CALL GB_INITIALIZE(0,STR_END,TERMINAL,IERR)
	YA(1) = IERR
	IF (IERR .NE. 0) RETURN
C
C	INITIALIZE THE VHR-19
C
	CALL GB_IN_STRING(STR_INIT_DEV)
	CALL GB_EMPTY
	LVECTOR_GOING = .FALSE.
	RETURN
C
C	**************************
C	GET FRESH PLOTTING SURFACE
C	**************************
C
200	CONTINUE
	CALL GB_EMPTY
	CALL GB_IN_STRING(STR_BEGIN_PLOT)
	CALL GB_EMPTY
	LVECTOR_GOING = .FALSE.
	RETURN
C
C	****
C	MOVE
C	****
C
300	CONTINUE
C	CONVERT CM. TO GRAPHICS UNITS ROUNDED
	IXPOSN = XGUPCM*XA(1)+0.5
	IYPOSN = YGUPCM*YA(1)+0.5
	LVECTOR_GOING = .FALSE.
	RETURN
C
C	****
C	DRAW
C	****
C
400	CONTINUE
	IX = XGUPCM*XA(1)+0.5
	IY = YGUPCM*YA(1)+0.5
	LVECTOR_GOING = LVECTOR_GOING .AND. (.NOT. GB_TEST_FLUSH(4))
	IF (LVECTOR_GOING) GO TO 410
	LDUMMY = GB_TEST_FLUSH(9)
	LVECTOR_GOING = .TRUE.
	CALL GB_IN_STRING(STR_START_VECTOR)
	CALL GD_4010_CONVERT(IXPOSN,IYPOSN)
410	CALL GD_4010_CONVERT(IX,IY)
	IXPOSN = IX
	IYPOSN = IY
	RETURN
C
C	*****************************
C	FLUSH GRAPHICS COMMAND BUFFER
C	*****************************
C
500	CONTINUE
	CALL GB_TEST_FLUSH(LEN(STR_END_PLOT))
	CALL GB_IN_STRING(STR_END_PLOT)
	CALL GB_EMPTY
	LVECTOR_GOING = .FALSE.
	RETURN
C
C	******************
C	RELEASE THE DEVICE
C	******************
C
600	CONTINUE
C
C	DE-ASSIGN THE CHANNAL
C
	CALL GB_EMPTY
	CALL GB_FINISH(0)
	RETURN
C
C	*****************************
C	RETURN DEVICE CHARACTERISTICS
C	*****************************
C
700	CONTINUE
	DO 720 I=1,8
	XA(I) = DCHAR(I)
720	CONTINUE
	RETURN
C
C	****************************
C	SELECT CURRENT DRAWING COLOR
C	****************************
C
800	CONTINUE
	LDUMMY = GB_TEST_FLUSH(12)
	ICOLOR = XA(1)
	IF (ICOLOR .LT. 0 .OR. ICOLOR .GT. 7) RETURN
	CALL GB_IN_STRING(STR_COLOR_SET)
	CALL NUMSTR(MAP_COLOR(1+ICOLOR),STRING)
	CALL GB_IN_STRING(STRING)
	CALL GB_IN_STRING(STR_COMMA_END)
	LVECTOR_GOING = .FALSE.
	RETURN
C
C	**********************
C	PERFORM GRAPHICS INPUT
C	**********************
C
900	CONTINUE
C
C	DO A GIN
C
	CALL GB_EMPTY
C
	CALL GB_GIN(PROMPT,IGIN_IN_CHARS,.TRUE.,GINBUFR)
C
	ICHAR = GINBUFR(1)
	IX1 = GINBUFR(2)
	IX2 = GINBUFR(3)
	IY1 = GINBUFR(4)
	IY2 = GINBUFR(5)
C
	XA(1) = IAND(ICHAR,127)		!PICK CHARACTER
	IX_GIN_CURSOR = 32*IAND(IX1,31)+IAND(IX2,31)
	XA(2) = IX_GIN_CURSOR/XGUPCM
	IY_GIN_CURSOR = 32*IAND(IY1,31)+IAND(IY2,31)
	XA(3) = IY_GIN_CURSOR/YGUPCM
C
	CALL GB_IN_STRING(STR_END_GIN)
	CALL GB_EMPTY
	RETURN
C
C	*******************
C	DRAW FILLED POLYGON
C	*******************
C
20000	CONTINUE
	NPTS = IFXN - 1024
	CALL GB_EMPTY
	CALL GB_IN_STRING(STR_POLYGON_START)
	CALL NUMSTR(NPTS,STRING)
	CALL GB_IN_STRING(STRING)
	CALL GB_IN_STRING(STR_POLYGON_PATTERN)
C
C	DO VERTICES 1 THRU N.
C
		DO 20010 I = 1, NPTS
		IX = XGUPCM*XA(I)+0.5
		IY = YGUPCM*YA(I)+0.5
		CALL NUMSTR(IX,STRING)
		CALL GB_IN_STRING(STRING)
		CALL GB_INSERT(BCOMMA)
		CALL NUMSTR(IY,STRING)
		CALL GB_IN_STRING(STRING)
		CALL GB_INSERT(BCOMMA)
20010		CONTINUE
	CALL GB_IN_STRING(STR_COMMA_END)
	LVECTOR_GOING = .FALSE.
	RETURN
	END
