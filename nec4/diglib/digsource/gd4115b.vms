	SUBROUTINE GD4115B(IFXN,XA,YA)
	DIMENSION XA(8), YA(3)
C
C	TEK 4115B DRIVER FOR DIGLIB/VAX
C		VERSION 2.2 - CURSOR POSITIONING AND HARDWARE POLYGONS
C			AND POSSIBLE REDIRECTION TO "TEK4115B_TERM"
C			NOW WITH ENCAPSULATION INSIDE "CODE TEK"/"CODE ANSI"
C
	BYTE ESC, CSUB, GS, CR, FF, US, LF
	PARAMETER (ESC=27, CSUB=26, GS=29, CR=13, FF=12, US=31, LF=10)
	CHARACTER*50 TERMINAL
C
	INTEGER*4 SYS$TRNLOG
C
C	DEFINITIONS FOR DEVICE CONTROL
C
	BYTE STR_BEGIN(6), STR_END(6), STR_INIT_DEV(56), STR_WINDOW(4)
	BYTE STR_BEGIN_PLOT(12), STR_COLOR_SET(4)
	BYTE STR_END_PLOT(2), STR_RLS_DEV(6)
	BYTE STR_BEGIN_POLY(4), STR_END_POLY(6)
	BYTE STR_FILL_PATRN(4), STR_SET_GIN_WINDOW(4)
	BYTE STR_SET_GIN_AREA(6)
	DATA STR_BEGIN /ESC,'%','!','0',0,0/	!CODE TEK
	DATA STR_END /US,ESC,'%','!','1',0/	!CODE ANSI
	DATA STR_INIT_DEV/
	2   ESC,'K','A','1',		!DAENABLE YES
	3   ESC,'L','M','0',		!DAMODE REPLACE
	4   ESC,'M','L','1',		!LINEINDEX 1 (COLOR 1)
	5   ESC,'N','U',':',		!BYPASS CANCEL CHARACTER (LF)
	6   ESC,'N','T','1','=',	!EOL STRING <CR> <NULL>
	7   ESC,'N','F','3',		!FLAGGING IN/OUT (XON/XOFF IN USE)
	8   ESC,'I','C','0','0',	!USE CROSS HAIR CURSOR
	9   ESC,'I','G','0','0','0',	!NO GIN GRIDDING
	1   ESC,'T','M','4','1','1',	!SET_COLOR_MODE (MACHINE/OPAQUE/COLOR)
	1   ESC,'M','V','0',		!SOLID LINES
	2   ESC,'N','M','0',		!DISABLE PROMPT MODE
	3   ESC,'I','K','0',2*0/	!STANDARD GIN REPORT
	DATA STR_WINDOW / ESC,'R','W',0/
	DATA STR_SET_GIN_WINDOW / ESC,'I','W',0/
	DATA STR_SET_GIN_AREA / ESC,'I','V','0',33,0/
	DATA STR_BEGIN_PLOT/
	1   ESC,'R','D','1','8',	!1 DISPLAY SURFACE OF ALL 8 BIT PLANES
	2   ESC,'R','I','2','1','1',0/	!SURFACE 1 IS VISIBLE
	DATA STR_COLOR_SET /
	1   ESC,'M','L',0/		!LINEINDEX 1 (COLOR N)
	DATA STR_END_PLOT /0,0/
	DATA STR_RLS_DEV /
	1   ESC,'%','!','1',0,0/	!CODE ANSI
	DATA STR_BEGIN_POLY / ESC,'L','P',0/
	DATA STR_END_POLY / US,ESC,'L','E',2*0/
	DATA STR_FILL_PATRN /ESC,'M','P',0/
C
C	DEFINITIONS FOR GIN
C
	BYTE GINBUFR(10), PROMPT(10), STR_MOVE_GIN_CURSOR(6)
	DATA PROMPT /ESC,'%','!','0',ESC, 'I','E','0','1', 0/
	DATA IGIN_IN_CHARS /8/
	DATA STR_MOVE_GIN_CURSOR / ESC, 'S', 'X', '0', 0,0/
	DATA IX_GIN_CURSOR, IY_GIN_CURSOR / 640, 512 /
C
C	DECLARE BUFFERING FUNCTION
C
	LOGICAL GB_TEST_FLUSH
C
C	DECLARE VARS NEED FOR DRIVER OPERATION
C
	LOGICAL LVECTOR_GOING, LDUMMY
	DIMENSION DCHAR(8)
C
C	MAKE NICE NAMES FOR THE DEVICES RESOLUTION IN X AND Y
C	 ("XGUPCM" IS X GRAPHICS UNITS PER CENTIMETER)
C
	EQUIVALENCE (DCHAR(4),XGUPCM), (DCHAR(5),YGUPCM)
	DATA DCHAR /4115.0, 34.778, 27.817, 36.776, 36.776, 15.0, 453.0, 1.0/
C
C*****************
C
C	FIRST VERIFY WE GOT A GRAPHICS FUNCTION WE CAN HANDLE
C
	IF (IFXN .GT. 1026) GOTO 20000
	IF (IFXN .LE. 0 .OR. IFXN .GT. 10) RETURN
C
C	NOW DISPATCH TO THE PROPER CODE TO HANDLE THAT FUNCTION
C
	GO TO (100,200,300,400,500,600,700,800,900,1000) IFXN
C
C	*********************
C	INITIALIZE THE DEVICE
C	*********************
C
100	CONTINUE
C
C	FIRST, INITIALIZE THE BUFFER SUBROUTINES
C
	ISTATUS = SYS$TRNLOG('TEK4115B_TERM',ITTNAMELEN,TERMINAL, , , )
	IF (ISTATUS .NE. 1) THEN
		TERMINAL = 'TT'
		ITTNAMELEN = 2
	ENDIF
D	TYPE *,'ISTATUS = ',ISTATUS,'   TERMINAL = ',TERMINAL
	CALL GB_INITIALIZE(0,STR_END,TERMINAL(1:ITTNAMELEN),IERR)
	YA(1) = IERR
	IF (IERR .NE. 0) RETURN
	CALL GB_BEGIN_STRING(STR_BEGIN)
C
C	INITIALIZE THE 4115
C
	CALL GB_IN_STRING(STR_INIT_DEV)
	CALL GB_IN_STRING(STR_WINDOW)
	CALL GD_4014_CONVERT(0,0)
	IX = INT(DCHAR(2)*XGUPCM+0.5)
	IY = INT(DCHAR(3)*YGUPCM+0.5)
	CALL GD_4014_CONVERT(IX,IY)
	CALL GB_IN_STRING(STR_SET_GIN_WINDOW)
	CALL GD_4014_CONVERT(0,0)
	CALL GD_4014_CONVERT(4095,4095)
	CALL GB_IN_STRING(STR_SET_GIN_AREA)
	CALL GD_4014_CONVERT(0,0)
	CALL GD_4014_CONVERT(4095,4095)
	CALL GB_EMPTY
	LVECTOR_GOING = .FALSE.
	ICOLOR = 1
	RETURN
C
C	**************************
C	GET FRESH PLOTTING SURFACE
C	**************************
C
200	CONTINUE
	CALL GB_EMPTY
	CALL GB_IN_STRING(STR_BEGIN_PLOT)
	CALL GD4115_CMAP(1,100.0,100.0,100.0)
	CALL GD4115_CMAP(2,100.0,0.0,0.0)
	CALL GD4115_CMAP(3,0.0,100.0,0.0)
	CALL GD4115_CMAP(4,0.0,0.0,100.0)
	CALL GD4115_CMAP(5,100.0,100.0,0.0)
	CALL GD4115_CMAP(6,100.0,0.0,100.0)
	CALL GD4115_CMAP(7,0.0,100.0,100.0)
	CALL GB_EMPTY
	LVECTOR_GOING = .FALSE.
	RETURN
C
C	****
C	MOVE
C	****
C
300	CONTINUE
C	CONVERT CM. TO GRAPHICS UNITS ROUNDED
	IXPOSN = XGUPCM*XA(1)+0.5
	IYPOSN = YGUPCM*YA(1)+0.5
	LVECTOR_GOING = .FALSE.
	RETURN
C
C	****
C	DRAW
C	****
C
400	CONTINUE
	IX = XGUPCM*XA(1)+0.5
	IY = YGUPCM*YA(1)+0.5
	LVECTOR_GOING = LVECTOR_GOING .AND. (.NOT. GB_TEST_FLUSH(5))
	IF (LVECTOR_GOING) GO TO 410
	LDUMMY = GB_TEST_FLUSH(11)
	LVECTOR_GOING = .TRUE.
	CALL GB_INSERT(GS)
	CALL GD_4014_CONVERT(IXPOSN,IYPOSN)
410	CALL GD_4014_CONVERT(IX,IY)
	IXPOSN = IX
	IYPOSN = IY
	RETURN
C
C	*****************************
C	FLUSH GRAPHICS COMMAND BUFFER
C	*****************************
C
500	CONTINUE
	CALL GB_EMPTY
	CALL GB_IN_STRING(STR_END_PLOT)
	CALL GB_EMPTY
	LVECTOR_GOING = .FALSE.
	RETURN
C
C	******************
C	RELEASE THE DEVICE
C	******************
C
600	CONTINUE
C
C	DE-ASSIGN THE CHANNAL
C
	CALL GB_EMPTY
	CALL GB_IN_STRING(STR_WINDOW)
	CALL GD_4014_CONVERT(0,0)
	CALL GD_4014_CONVERT(4095,4095)
	CALL GB_FINISH(STR_RLS_DEV)
	RETURN
C
C	*****************************
C	RETURN DEVICE CHARACTERISTICS
C	*****************************
C
700	CONTINUE
	DO 720 I=1,8
	XA(I) = DCHAR(I)
720	CONTINUE
	RETURN
C
C	****************************
C	SELECT CURRENT DRAWING COLOR
C	****************************
C
800	CONTINUE
	LDUMMY = GB_TEST_FLUSH(10)
	ICOLOR = XA(1)
	IF (ICOLOR .LT. 0 .OR. ICOLOR .GT. INT(DCHAR(6))) RETURN
	CALL GB_IN_STRING(STR_COLOR_SET)
	CALL GD_41XX_INT(ICOLOR)
	LVECTOR_GOING = .FALSE.
	RETURN
C
C	**********************
C	PERFORM GRAPHICS INPUT
C	**********************
C
900	CONTINUE
C
C	POSITION CURSOR TO ITS LAST GIN POSITION (ELSE MIDDLE OF SCREEN)
C
	CALL GB_TEST_FLUSH(12)
	CALL GB_IN_STRING(STR_MOVE_GIN_CURSOR)
	CALL GD_4014_CONVERT(IX_GIN_CURSOR,IY_GIN_CURSOR)
	CALL GB_EMPTY
C
	CALL GB_GIN(PROMPT,IGIN_IN_CHARS,.TRUE.,GINBUFR)
C
	CALL GB_INSERT(LF)		!SEND BYPASS CANCEL CHARACTER
	CALL GB_EMPTY
C
	IF (GINBUFR(7) .EQ. CR .AND. GINBUFR(8) .EQ. CR) GO TO 960
		CALL GB_IN_STRING('Error reading cursor, try again.')
		CALL GB_INSERT(CR)
		CALL GB_EMPTY
D		TYPE 9999, (I,GINBUFR(I), I=1,IGIN_IN_CHARS)
D9999		FORMAT(' Character ',I2,' is ',I4,' decimal.')
		GO TO 900
C
960	CONTINUE
	ICHAR = GINBUFR(1)
	IY1 = GINBUFR(2)
	IEX = GINBUFR(3)
	IY2 = GINBUFR(4)
	IX1 = GINBUFR(5)
	IX2 = GINBUFR(6)
C
	XA(1) = IAND(ICHAR,127)		!PICK CHARACTER
	IX_GIN_CURSOR = 128*IAND(IX1,31)+4*IAND(IX2,31)+IAND(IEX,3)
	XA(2) = IX_GIN_CURSOR/XGUPCM
	IY_GIN_CURSOR = 128*IAND(IY1,31)+4*IAND(IY2,31)+IAND(IEX/4,3)
	XA(3) = IY_GIN_CURSOR/YGUPCM
	RETURN
C
C	*********************
C	DEFINE COLOR WITH RGB
C	*********************
C
1000	CONTINUE
	CALL GB_TEST_FLUSH(14)
	CALL GD4115_CMAP(INT(XA(1)),YA(1),YA(2),YA(3))
	LVECTOR_GOING = .FALSE.
	RETURN
C
C	*******************
C	DRAW FILLED POLYGON
C	*******************
C
20000	CONTINUE
	NPTS = IFXN - 1024
	IX = XGUPCM*XA(1)+0.5
	IY = YGUPCM*YA(1)+0.5
	LVECTOR_GOING = LVECTOR_GOING .AND. (.NOT. GB_TEST_FLUSH(40))
	IF (LVECTOR_GOING) THEN
		CALL GB_INSERT(US)
		LVECTOR_GOING = .FALSE.
	ENDIF
	CALL GB_IN_STRING(STR_FILL_PATRN)
	CALL GD_41XX_INT(-ICOLOR)
	CALL GB_IN_STRING(STR_BEGIN_POLY)
	CALL GD_4014_CONVERT(IX,IY)
	CALL GD_41XX_INT(1)			!DRAW BOUNDARY
C
C	DO VERTICES 2 THRU N.   NOTE: WE START WITH A <GS> SINCE
C	 LVECTOR_GOING IS "FALSE"
C
		DO 20010 I = 2, NPTS
C		MAKE SURE 11 CHARS (5 FOR X,Y AND 6 FOR END POLYGON)
		LVECTOR_GOING = LVECTOR_GOING .AND. (.NOT. GB_TEST_FLUSH(11))
		IF (.NOT. LVECTOR_GOING) CALL GB_INSERT(GS)
		CALL GD_4014_CONVERT(INT(XGUPCM*XA(I)+0.5),
	1		INT(YGUPCM*YA(I)+0.5))
20010		CONTINUE
	CALL GB_IN_STRING(STR_END_POLY)
	LVECTOR_GOING = .FALSE.
	RETURN
	END

	SUBROUTINE GD4115_CMAP(ICOLOR,RED,GRN,BLU)
C
C	THIS SUBROUTINE SETS THE SPECIFIED COLOR INTO THE LOOK-UP TABLE.
C	IT ASSUMES THE CALLER HAS MADE SURE THERE ARE ATLEAST 12 BYTES
C	AVAILABLE IN THE BUFFER.
C
	BYTE ESC
	PARAMETER (ESC=27)
	PARAMETER (COLORS = 2.55)
	PARAMETER (MAXCOL = 255)
C
	BYTE SET_SURFACE_COLOR_MAP(6)
	DATA SET_SURFACE_COLOR_MAP /ESC, 'T', 'G', '1', '4', 0/
C
	CALL GB_TEST_FLUSH(20)
	CALL GB_IN_STRING(SET_SURFACE_COLOR_MAP)
	CALL GD_41XX_INT(ICOLOR)
	CALL GD_41XX_INT(MIN(MAXCOL,INT(COLORS*RED+0.5)))
	CALL GD_41XX_INT(MIN(MAXCOL,INT(COLORS*GRN+0.5)))
	CALL GD_41XX_INT(MIN(MAXCOL,INT(COLORS*BLU+0.5)))
	RETURN
	END
