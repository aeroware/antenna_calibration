	SUBROUTINE GDVECTRIX384(IFXN,XA,YA)
	DIMENSION XA(8), YA(3)
C
C	VECTRIX VX384 DRIVER FOR DIGLIB/VAX (USES "HEX" FORMAT)
C
C---------------------------------------------------------------------------
C
	CHARACTER*(*) TERMINAL
	PARAMETER (TERMINAL='DIG_VECTRIX_TTY')
C
C	DEFINITIONS FOR DEVICE CONTROL
C
	BYTE STR_INIT_VECTRIX(4)
	DATA STR_INIT_VECTRIX /'G','K','F',0/
	BYTE INIT_RGB(24)
	DATA INIT_RGB /0,0,0, 255,255,255, 255,0,0, 0,255,0, 0,0,255,
	1   255,255,0, 255,0,255, 0,255,255 /
C
C	DECLARE ARRAY FOR DEVICE PARAMETERS
C	 MAKE NICE NAMES FOR THE DEVICES RESOLUTION IN X AND Y
C	 ("XGUPCM" IS X GRAPHICS UNITS PER CENTIMETER)
C
	DIMENSION DCHAR(8)
	EQUIVALENCE (DCHAR(4),XGUPCM), (DCHAR(5),YGUPCM)
	DATA DCHAR /128.0, 26.84, 19.16, 25.0, 25.0, 7.0, 789.0, 1.0/
C
C	DECLARE BUFFERING FUNCTION
C
	LOGICAL GB_TEST_FLUSH
C
	LOGICAL LDUMMY
C
C*****************
C
C	FIRST VERIFY WE GOT A GRAPHICS FUNCTION WE CAN HANDLE
C
	IF (IFXN .GT. 1026) GO TO 1200	!FILLED POLYGON
	IF (IFXN .LE. 0 .OR. IFXN .GT. 10) RETURN
C
C	NOW DISPATCH TO THE PROPER CODE TO HANDLE THAT FUNCTION
C
	GO TO (100,200,300,400,500,600,700,800,900,1000) IFXN
C
C	*********************
C	INITIALIZE THE DEVICE
C	*********************
C
100	CONTINUE
C
C	FIRST, INITIALIZE THE BUFFER SUBROUTINES
C
	CALL GB_INITIALIZE(0,0,TERMINAL,IERR)
	YA(1) = IERR
	IF (IERR .NE. 0) RETURN
	CALL GB_IN_STRING(STR_INIT_VECTRIX)
	RETURN
C
C	**************************
C	GET FRESH PLOTTING SURFACE
C	**************************
C
200	CONTINUE
	CALL GB_NEW_BUFFER
	CALL GB_INSERT('E')
	CALL GD_VECTRIX_WORD(0)
	CALL GB_IN_STRING('REC')
	ICOLOR = 1
	CALL GD_VECTRIX_WORD(ICOLOR)
	CALL GB_INSERT('Q')
	CALL GD_VECTRIX_WORD(0)
	CALL GD_VECTRIX_WORD(8)
	DO 220 I=1,24
		CALL GB_INSERT(INIT_RGB(I))
220		CONTINUE
	RETURN
C
C	****
C	MOVE
C	****
C
300	CONTINUE
	CALL GB_INSERT('M')
	GO TO 410
C
C	****
C	DRAW
C	****
C
400	CONTINUE
	CALL GB_INSERT('L')
410	CONTINUE
C
	IX = XGUPCM*XA(1)+0.5
	IY = YGUPCM*YA(1)+0.5
	LDUMMY = GB_TEST_FLUSH(6)
	CALL GD_VECTRIX_WORD(IX)
	CALL GD_VECTRIX_WORD(IY)
	RETURN
C
C	*****************************
C	FLUSH GRAPHICS COMMAND BUFFER
C	*****************************
C
500	CONTINUE
	CALL GB_EMPTY
	RETURN
C
C	******************
C	RELEASE THE DEVICE
C	******************
C
600	CONTINUE
C
C	DE-ASSIGN THE CHANNAL
C
	CALL GB_FINISH(0)
	RETURN
C
C	*****************************
C	RETURN DEVICE CHARACTERISTICS
C	*****************************
C
700	CONTINUE
	DO 720 I=1,8
	XA(I) = DCHAR(I)
720	CONTINUE
	RETURN
C
C	****************************
C	SELECT CURRENT DRAWING COLOR
C	****************************
C
800	CONTINUE
	IF (XA(1) .LT. 0.0 .OR. XA(1) .GT. 7.0) RETURN
	ICOLOR = XA(1)
	CALL GB_INSERT('C')
	CALL GD_VECTRIX_WORD(COLOR_MAP(ICOLOR))
	RETURN
900	RETURN
C
C	**********************
C	DEFINE COLOR USING RGB
C	**********************
C
1000	CONTINUE
	CALL GB_INSERT('Q')
	CALL GD_VECTRIX_WORD(INT(XA(1))
	CALL GD_VECTRIX_WORD(1)
	DO 1010 I=1,3
		CALL GB_INSERT(INT(2.55*YA(I)+0.5))
1010		CONTINUE
	RETURN
C
C	***************
C	FILLED POLYGONS
C	***************
C
1200	CONTINUE
	N = IFXN-1024
	CALL GB_INSERT('F')
	CALL GD_VECTRIX_WORD(COLOR_MAP(ICOLOR))
	CALL GD_VECTRIX_WORD(N)
	DO 1220 I=1, N
		CALL GD_VECTRIX_WORD(INT(XGUPCM*XA(I)+0.5))
		CALL GD_VECTRIX_WORD(INT(YGUPCM*YA(I)+0.5))
1220		CONTINUE
	RETURN
	END


	SUBROUTINE GD_VECTRIX_WORD(INT)
	INTEGER*2 INT
C
	CALL GB_INSERT(INT)
	CALL GB_INSERT(INT/256)
	RETURN
	END
