
function Y=AntAdmittance(Ant,Op,solver, antennalength,diameter);

% Y=AntAdmittance(Ant,Op,solver) calculates admittances Y from 
% Op.Curr.
% The admittance matrix Y is calculated from Op.Curr.

NB=3;   % number of base functions for concept

if(nargin<3)
    solver=1;   % default ASAP
end %if


if (solver==1)  % ASAP
    
    % Determine feed segments and at which end they are driven:

    TC=CheckTerminal(Ant.Desc,Op.Feed(:,1));

    if any(TC==0),
        error('Invalid Op.Feed passed.');
    end

    SegNum=abs(imag(TC));
    SegEnd=1+(imag(TC)<0);

    % Feed voltages:

    V=Op.Excit;

    Y=[];

    % Admittance matrix Y from Op.CurrSys or vector Y from Op.Curr:

    
    s=size(Op.Curr);
    Y=Op.Curr(:,sub2ind(s(2:end),SegNum,SegEnd)).';
   
else % concept
    % check additionally concept fields
    
    % Determine feed segments and at which end they are driven:

    
    % Feed voltages:

    V=Op.Excit;

    Y=[];

    % Admittance matrix Y from Op.CurrSys or vector Y from Op.Curr:

  
    Y=Op.ConceptCurr(:,Op.SegFeeds(:,),(NB+1)/2);
   
end %concept

if antennalength ~= 0,  
    [k,epsi,mu]=Kepsmu(Op);
    ZA=inv(Y);
    ZA=ZA-eye(3)*log(diameter/2/Ant.Wire(1))/antennalength/(4*pi^2)/epsi/j/Op.Freq;
    Y=inv(ZA);
end