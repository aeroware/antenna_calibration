
function [EE,HH,SS]=FieldConceptEH(er)

% [EE,HH,SS]=FieldConceptEH(er) calculates near field generated by the 
% excited on the given antenna system by using the EH1D routine of concept.
% The returned field vectors are EE and HH and SS, where SS is the poynting
% flux vector. er is a Nx3 matrix which contains the points where the 
% fields have to be determined.
%
% It must be ensured that the currents for the correct feed are computed in
% advance. Since this is S/C specific, it is not done in this procedure.
%
% This function was written by Thomas Oswald, April 07
%
% 14.5.7:   Included computation of H field
% 21.5.7:   Minor hoppalas

    Ner=size(er,1);  % number of directions
    EE=zeros(Ner,3);
    HH=zeros(Ner,3);
    SS=zeros(Ner,1);

% ------------------------------------------------------------------------

% E field

    WriteInputFile(1,er,Ner)

% call eh1d

    fprintf('calling EH1D... ');
  
    WriteIndirectionFile;
  
    [Status,Result]=dos('eh1d.exe < input.dat');
    if Status ~=0
        fprintf('failed\n');
    else
        fprintf('done\n');
    end
  
    EE=RearEh1dOut;

% ------------------------------------------------------------------------

% H field

    WriteInputFile(2,er,Ner)

 
% call eh1d

    fprintf('calling EH1D... ');
  
    WriteIndirectionFile;
  
    [Status,Result]=dos('eh1d.exe < input.dat');
    if Status ~=0
        fprintf('failed\n');
    else
        fprintf('done\n');
    end
  
    HH=RearEh1dOut;

% ------------------------------------------------------------------------

SS=0.5*cross(EE,conj(HH),2);

end % main function

%-------------------------------------------------------------------------

function WriteInputFile(field,er,Ner)
    % create eh1d.in

    fprintf('Creating EH1D input file...\n');

    fh=fopen('eh1d.in','w');
    if fh<0
        error(['Could not open file eh1d.in']);
    end

    fprintf(fh,'*** E field -> 1, H field -> 2, sar values ->3\n');
    fprintf(fh,'%d\n',field);
    fprintf(fh,'*** Total number of lines\n');
    fprintf(fh,'0\n');
    fprintf(fh,'*** Field points from a file (y/n)\n');
    fprintf(fh,'n\n');
    fprintf(fh,'*** Total number of field points\n');
    fprintf(fh,'%i\n',Ner);

    for n=1:Ner
        fprintf(fh,'*** Coordinates (x y z) for point %i\n',n);
        fprintf(fh,'%f %f %f\n',er(n,1),er(n,2),er(n,3));
    end % for
    fclose(fh);
end % function

%--------------------------------------------------------------------------

function WriteIndirectionFile
    % create indirection file
  
    fd=fopen('input.dat','w');
    fprintf(fd,'1\n');
    fclose(fd);
end % function

%--------------------------------------------------------------------------

function FF=RearEh1dOut
    % read eh1d.out
    n=1;    % index
    fh=fopen('eh1d.out','r');
    ll=fgetl(fh);
    while length(ll)==0 | ll~=-1
        if length(ll)>=2
            if ll(2)=='x'
                FF(n,1)=str2double(ll(21:31))+i*str2double(ll(35:45)); 
                ll=fgetl(fh);
                ll=fgetl(fh);
                FF(n,2)=str2double(ll(21:31))+i*str2double(ll(35:45)); 
                ll=fgetl(fh);
                ll=fgetl(fh);
                FF(n,3)=str2double(ll(21:31))+i*str2double(ll(35:45)); 
                n=n+1;
            end % if ll
        end %if length
        ll=fgetl(fh);
    end % while not EOF
    fclose(fh);
end % function