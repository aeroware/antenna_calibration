
function Op1=AntCurrent(ant,Op,Calc,solver,asapexe,titl,patches)

% function Op1=AntCurrent(ant,Op,Calc,AIF,AOF,AIFC, solver,asapexe,titl, patches) 
% calculates antenna current distribution. Op1 returns Op extended by the
% determined currents. Calc controls how and which 
% currents are calculated:
%
% Calc=0 .. Op1.Curr is calculated from Op.CurrSys and Op.Feed //obsolete
% Calc=1 .. Op1.Curr is calculated by one ASAP/CONCEPT call (default)
% Calc=2 .. Op1.Curr is calculated by calling ASAP/CONCEPT 
%           several times 
%
% The current system (field Curr) is defined to be the 
% currents excited by single voltage sources at the given 
% feeds (field Feed): Curr(k,:,:) is excited by a 
% voltage source of 1 Volt at Feed k (k=1..number of feeds).
% The field Curr contains the currents obtained when all
% given voltage sources are active at the same time, with 
% the corresponding voltages given in Feed(:,2).
% The parameters AIF and AOF define asap input and 
% asap output file name(s), each given as a cell array of 
% strings or a string matrix. AIFC is an optional comment
% string or cell array of strings for AIF. 
%
% Curr=StereoCurrent(Op) is a short form returning the current 
% field (not embedded in an Op1-structure) and presuming 
% Calc=0, so the fields Op.CurrSys and Op.Feed must exist.
%
% Only Calc=2 is implemented for Concept
%
% Revision:12.6.7 by Thomas Oswald
% Flexible length of Op.Excit
%
% Revision:01.08 by Thomas Oswald
% AIF and AOF and AIFC functionality removed

if nargin<6
    error('Not enough parameters !');
end

if nargin<7
    patches=0;
end
%-------------------------------------------------------------------------

if solver==1 % asap
    if nargin==1,
        [ant,Op]=deal([],ant);
        Calc=0;
    else
        Op1=Op;
        if (nargin<3)|isempty(Calc),
            Calc=1;
        end  % if
    end % else

    % Calculate CurrSys and/or Curr with the help of ASAP:

    if Calc==2, % calculate CurrSys and Curr

        n=size(Op.Feed,1);
        s=size(ant.Desc,1);
        Op1.Curr=zeros(n,s,2);
        Op1.Feed=Op.Feed;
        Op1.EpsilonR=Op.EpsilonR;
        C={'Current system calculation requested by function AntCurrent,',
            'this file for current excited by 1 Volt voltage source at'};
        for k=1:n,
            C{3}=['Feed number ',num2str(k),'. '];
            fprintf(C{3});
          
            Op1.Feed=[Op.Feed(k,1),1];
            Op1.Excit(k)=1;
            
            AsapWrite(,ant,Op1);
            AsapCall(AIF{ki},AOF{ko},asapexe);
            Op1.Curr(k,:,:)=AsapRead([],AOF{ko});
           % Op1.Curr=Op1.Curr+shiftdim(Op1.CurrSys(k,:,:))*Op.Feed(k,2);
        end %if Calc == 2
        Op1.Feed=Op.Feed;

    else % Calc==1: calculate Curr with one ASAP call

        C={'Current calculation requested by function AntCurrent'};
        AsapWrite(AIF{1},[AIFC(:);C(:)],ant,Op,'OUTPUT(CURRENT)');
        AsapCall(AIF{1},AOF{1},asapexe);
        Op1.Curr(1,:,:)=AsapRead([],AOF{1});

    end

    % delete eventual dummy files:

    if exist(AIFdefault,'file'),
        delete(AIFdefault);
    end

    if exist(AOFdefault,'file'),
        delete(AOFdefault);
    end
    %---------------------------------------------------------------------
else % concept
    %---------------------------------------------------------------------
  

    % Calculate CurrSys and/or Curr with the help of Concept II:


        n=size(Op.Feed,1);
        s=size(ant.Desc,1);
   
        Op1=Op;
        Op1.Curr=zeros(n,s,2);
        Op1.ConceptCurr=zeros(n,s,3);
        
        for k=1:n,
            C{3}=['Feed number ',num2str(k),'. \n'];
            fprintf(C{3});
            
            if patches
                ConceptWrite('concept.in',ant,Op1,8,3,k,titl);
                rval=ConceptCall();
                [ant, Op1]=ConceptRead(ant,Op1,k); 
            else
                ConceptWrite('concept.in',ant,Op1,8,2,k,titl);
                rval=ConceptCall();
                [ant, Op1]=ConceptRead(ant,Op1,k); 
            end
            
        end % for
        
        Op1.SegFeeds=Op.SegFeeds;
        Op1.Excit=zeros(length(Op1.SegFeeds),1)+1;
        Op1.Freq=Op.Freq;
end % concept
