
function [hp,hc,ha,hco,c,hsurf]=PlotGain(Ant,Op,feed,P,x,y,n,LogScale,ColScale,...
  GContour,tmax,ContourAnno);

% [hp,hc,ha]=PlotGain(Ant,Op,feed,P,t,p,n,LogScale,ColScale)
% plots a 3-dimensional radiation pattern. If P>0 the radiated
% power per unit solid angle devided by P/(4pi) is plotted, certain
% negative values can be used as shortcuts:
%   P=-1:  effective power gain (P=Pin), is default
%   P=-2:  directive gain (P=power radiated=Pin-Ploss)
%   P=-3:  radiated power per unit solid angle (P=4*pi)
% t and p define a solid angle of emission direction, colatitute
% running from t(1) to t(2), and azimuth from p(1) to p(2).
% n(1) and n(2) are the number of segments used to span the
% colatitude and azimuth range, respectively (default: ~every 6deg).
% If an optional LogScale is given, the scaling is not linear but 
% logarithmic. LogScale=[dBmin,ZerodB] is a 2-element vector, which
% defines the minimum dB at the origin, and the gain value used 
% as reference for the dB-scale (corresponding to zero dB).
% The optional ColScale=[Cmin,Cmax] defines how the colors are scaled:
% Cmin and Cmax are the values (gain for linear scale or dB for defined 
% LogScale) correponding to the lowest and highest color in the colormap,
% respectively. hp, ha and hc return handles to the pattern surface, 
% the 3 plotted axes and the color map.
%
% [hp,hc,ha,hco,c]=PlotGain(Ant,Op,P,t,p,n,LogScale,ColScale,GContour)
% draws gain countour lines instead of theta- and phi-lines, where
% GContour is the number of contour lines to be drawn. If GContour
% is a vector, it gives directly the gain values for which the 
% contours are drawn.
%
% [hp,hg,ha]=PlotGain(Ant,Op,P,x,y,n,LogScale);
% In case x and y are 3-dimensional vectors, a polar plot in the
% plane spanned by x and y is generated, x representing the direction 
% of the x-axis. y need not be orthogonal to x, but it defines the 
% orientation of the y-axis. Optional arguments are:
%   n .. number of interpolation points (default=every 3deg).
%   LogScale .. logarithmic scale, as described above.
% hp returns a handle to the pattern line. hg and ha are handles
% to the gain and angle annotation, respectively.
%
% [hp,hc,ha,hco,c,hsurf]=PlotGain(Ant,Op,P,x,y,n,LogScale,ColScale,...
%   GContour,tmax,ContourAnno) 
% plot 2-dim polar plot. x and y define the xy-plane, as above, and so 
% also the z-axis is determined, which is the polar axis for the 
% spherical coordinates t (colatitude) and p (azimuth). 
% A 2-dim polar plot is created, where t is drawn as radius and p as azimuth,
% the surface is colored as defined by the shown colorbar and contour lines
% are plotted. tmax sets the maximum t-value (outermost radius), if set 
% negative the lower t-hemisphere from pi-|tmax| to pi is drawn.
% rContour is the number of contours to be plotted (if a vector is given, 
% it defines directly the contour levels), ContourAnno=1 causes annotation 
% of contour lines (a vector defines the levels to be annotated). 
%   hp contourlabel handle, 
%   hc color bar handle, 
%   ha axis lines,
%   hco contour handles, 
%   c contours,
%   hsurf handle of transparent surface
% The global variable GlobalGainFunction sets the function to be used to 
% calculate the gain, if it is empty the default function PowerGain
% is used.

global GlobalGainFunction;

if isempty(GlobalGainFunction),
  GainFunction='PowerGain';
else
  GainFunction=GlobalGainFunction;
end

if (nargin<3)|isempty(P),  % determine default P
  P=-1;
end
if isequal(P,-1),
  P=real(PowerInput(Ant,Op,feed));
elseif isequal(P,-2),
  P=real(PowerInput(Ant,Op,feed)-PowerLoss(Ant,Op,feed));
elseif isequal(P,-3),
  P=4*pi;
elseif P<=0,
  error('Unknown power parameter for gain calculation.');
end

if (nargin<5)|isempty(x),
  x=[0,pi];
end
x=x(:)';

if (nargin<6)|isempty(y),
  if length(x)==3,
    error('Missing y-vector for plane definition.');
  end
  y=[0,2*pi];
end
y=y(:)';

if (nargin<6)|isempty(n),
  if length(x)==3,
    n=120;
  else
    n=max(1,round(30/pi*abs([x(2)-x(1),y(2)-y(1)])));
  end 
end 

if nargin<8,
  LogScale=[];
end

if (nargin<9),
  ColScale=[];
end

if (nargin<10)|isempty(GContour),
  GContour=0;
end

if (nargin<11)|isempty(tmax),
  tmax=0;
end
LowerHemisphere=(tmax<0);
tmax=abs(tmax);

if (nargin<11),
  ContourAnno=[];
end

[hp,hc,ha,hco,c]=deal([]);

if (length(x)==3)&(length(n)==1),  % 2-dimensional plot
  
  x=x/Mag(x);
  y=y-x.*(x*y');
  y=y/Mag(y);
  
  p=((0:n)/n*2*pi)';
  r=cos(p)*x+sin(p)*y;
  
  G=feval(GainFunction,Ant,Op,r,P);
  
  if ~isempty(ColScale),
    [mi,ni]=min(G);
    [ma,na]=max(G);
    G=[G,ma*sin(p-p(ni)).^2];
    p=[p,p];
  end

  [hp,hc,ha]=PlotPolar2(p,G,LogScale);
  
  set(hp(2),'LineStyle','--','Color','r');
  
elseif (length(x)==3)&(length(n)==2)&tmax,  % 2-dimensional contour plot
  
%  [hp,hc,ha,hco,c]=PlotGain(Ant,Op,P,x,y,n,LogScale,ColScale,GContour,tmax)

  tmax=sort(max(0,min(pi,tmax)));
  
  if LowerHemisphere,
    [t,p]=meshgrid(pi-(0:n(1))/n(1)*tmax,(0:n(2))/n(2)*2*pi);
  else  
    [t,p]=meshgrid((0:n(1))/n(1)*tmax,(0:n(2))/n(2)*2*pi);
  end
  [u,v,w]=sph2cart(p,pi/2-t,1);
  
  x=x/Mag(x);
  y=y-x.*(x*y');
  y=y/Mag(y);
  z=cross(x,y);
  
  G=reshape(feval(GainFunction,Ant,Op,u(:)*x+v(:)*y+w(:)*z,P),size(t));
  
  if LowerHemisphere,
    t=max(0,min(pi,pi-t));
  end
  
  [hp,hc,ha,hco,c,hsurf]=...
    PlotPolar3(t,p,G,LogScale,ColScale,GContour,tmax,ContourAnno);

else  % 3-dimensional plot

  x=sort(max(0,min(pi,x)));
  y=mod(y,2*pi);
  if y(1)>y(2)-1e-2,
    y(1)=y(1)-2*pi;
  end
  
  [t,p]=meshgrid(x(1)+(0:n(1))/n(1)*(x(2)-x(1)),...
                 y(1)+(0:n(2))/n(2)*(y(2)-y(1)));
  
  [u,v,w]=sph2cart(p,pi/2-t,1);
  
  G=reshape(feval(GainFunction,Ant,Op,[u(:),v(:),w(:)],P),size(t));
  
  [hp,hc,ha,hco,c]=...
    PlotPolar3(t,p,G,LogScale,ColScale,GContour);
  
end

  