============================================================

function Asap_Call(WorkingDir)

% [Status,Result]=Asap_Call(WorkingDir)
% calls Asap in the given WorkingDir, using the Asap input file name 
% which is defined in the global variable Atta_Asap_In and outputs 
% the result to the file defined in Atta_Asap_Out. The Asap executable
% is Atta_Asap_Exe. If it is not find in the current directory, the
% Matlab search path is searched for this file.

global Atta_Asap_Exe Atta_Asap_In Atta_Asap_Out Atta_Asap_Inexe Atta_Asap_Outexe

% Determine Asap executable:

AsapExe=Atta_Asap_Exe; 

if isempty(AsapExe),
  error('No ASAP executable (file name) defined, set the global variable Atta_Asap_Exe.');
end

if isempty(dir(AsapExe)),
  d=FindOnPath(AsapExe);
  if isempty(d),
    error(['''',AsapExe,...
      ''' not found in current directory nor on MATLAB search path.']);
  end
  AsapExe=fullfile(d{1},AsapExe);
  if isempty(dir(AsapExe)),
    error(['Error locating Asap executable ''',AsapExe,'''']);
  end
end

% change to working directory if required:

if ~exist('WorkingDir','var')||isempty(WorkingDir),
  WorkingDir='';
end

if ~isempty(WorkingDir),
  SaveDir=pwd;
  try
    cd(WorkingDir);
  catch
    error(['Cannot change to working directory "',WorkingDir,'".']);
  end
end

% call ASAP:

Message='Asap calculations running ... ';

if ~isequal(upper(Atta_Asap_Inexe),upper(Atta_Asap_In)),
  copyfile(Atta_Asap_In,Atta_Asap_Inexe);
end

fprintf(Message);
[Status,Result]=dos(AsapExe);
  if Status~=0,
    fprintf('failed.\n');
    error([Result,'.']);
  else
    fprintf(repmat('\b',1,length(Message)));
  end

if ~isequal(upper(Atta_Asap_Outexe),upper(Atta_Asap_Out)),
  copyfile(Atta_Asap_Outexe,Atta_Asap_Out);
  delete(Atta_Asap_Outexe);
end

if ~isequal(upper(Atta_Asap_Inexe),upper(Atta_Asap_In)),
  delete(Atta_Asap_Inexe);
end

% go back to original directory:

if ~isempty(WorkingDir),
  cd(SaveDir);
end

============================================================

function Asap_CreateIn(PhysGrid,Freq,FeedNum,C,WorkingDir,AddCards)

% Asap_CreateIn(PhysGrid,Freq,FeedNum,C,WorkingDir)
% creates ASAP input file (filename in global variable Atta_Asap_In) 
% by translating given data into ASAP input format.
% Freq defines the operation frequency.
% C is an optional comment line which serves as a preamble. 
% PhysGrid defines the antenna system, the following fields of which 
% are used:
%
%   Geom .. N x 3, coordinates of grid nodes (x,y,z) 
%   Desc .. S x 2, grid segments (start node, end node)
%   Geom_.Feeds, Desc_.Feeds .. feeds at nodes and segments, respectively
%   Geom_.Loads, Desc_.Loads .. loads at nodes and segments, respectively
%   Desc_.Wire.Diam, Desc_.Wire.Cond, segment diameters and conductivities
%            (ASAP uses the value that appears most often)
%   Default.ASAP.Inte .. number of steps for simpson integration 
%            (0 causes analytic integration)
%   Exterior.epsr  .. dielectric constant of exterior medium
%
% FeedNum='all' signifies that all feeds 
% [PhysGrid.Geom_.Feeds.Elem,PhysGrid.Desc_.Feeds.Elem] are
% driven, namely by the respective voltages 
% [PhysGrid.Geom_.Feeds.V,PhysGrid.Desc_.Feeds.V].
% In case FeedNum is numeric, only the feed with the number FeedNum
% is driven by 1 Volt, the others are short-circuited, where
% the counting is according to the order in the concatenation
% [PhysGrid.Geom_.Feeds.Elem,PhysGrid.Desc_.Feeds.Elem]. 
% The fields PhysGrid.Geom_.Feeds.V and PhysGrid.Desc_.Feeds.V
% are ignored in this case.
%
% All physical quantities are supposed to be in SI-units!
%
% Default values are used for certain elements if omitted ore empty
% (the other elements must be defined):
%   Exterior.epsr=1, i.e. vacuum (Exte=(0,1))
%
% The wire conductivities may be inf indicating perfectly conducting wires. 
% If they are 0, a default value of 50e6 S/m is used 
% (e.g. Cu 64e6, Al 38e6, Fe ~10e6).
% Since ASAP can only manage one wire diameter and a fixed conductivity  
% over the whole antenna, it uses the most frequently occuring
% values in PhysGrid.Desc_.Diam and PhysGrid.Desc_.Cond, respectively.
%
% Asap_CreateIn(PhysGrid,Freq,WorkingDir,C,AddCards) 
% additionally inserts the cards AddCards before the output request 
% card OUTPUT(CURRENT) in the ASAP input file. The file is terminated 
% by the STOP card and a comment indicating when the file was generated.
%
% C and AddCards may be char matrices (each row a line), or 
% a cell vector of strings (each line in a separate cell).

global Atta_Asap_In

sig=8;  % Number of significant decimals to be used for ASAP format

deg=pi/180;

cL=2.99792458e8;
eps0=1/(4e-7*pi*cL^2);


if ~exist('C','var')||isempty(C),
  C={};
end

if ~exist('AddCards','var')||isempty(AddCards),
  AddCards={};
end


% open/create ASAP input file:
% ---------------------------

if ~exist('WorkingDir','var')||isempty(WorkingDir),
  WorkingDir='';
end

AIF=fullfile(WorkingDir,Atta_Asap_In);

fid=fopen(AIF,'wt');
if fid<0,
  error(['Could not open/create file ',AIF]);
end


% Preamble:
% ---------

if ~isempty(C),

  fprintf(fid,'C      \n');
  
  if ischar(C),
    C=cellstr(C);
  end

  for L=C(:).',
    fprintf(fid,'C      %s\n',L{:});
  end

  fprintf(fid,'C      \n');
  
end


% Wire:
% -----

Radius=mode(PhysGrid.Desc_.Diam)/2;   % take most frequently occuring radius
Cond=mode(PhysGrid.Desc_.Cond)/1e6;   % conductivity in MS/m!

if isequal(Cond,0),
  Cond=50;
elseif isinf(Cond),
  Cond=-1;
end

fprintf(fid,'WIRE(RADI=');
AsapFprintf(fid,sig,Radius);

fprintf(fid,'/COND=');
AsapFprintf(fid,sig,Cond);  

fprintf(fid,')\n');


% Insu(lation):
% -------------
% (not yet implemented in this version) 
%
% if isfield(PhysGrid,'Insu'),
%   if ~isempty(PhysGrid.Insu),
%     fprintf(fid,'INSU(RADI=');
%     AsapFprintf(fid,sig,PhysGrid.Insu(1,1));
%     fprintf(fid,'/COND=');    
%     AsapFprintf(fid,sig,PhysGrid.Insu(1,2)); % conductivity in S/m!
%     fprintf(fid,'/DIEL=');    
%     AsapFprintf(fid,sig,PhysGrid.Insu(1,3));
%     fprintf(fid,')\n');
%   end
% end


% Geom(etry):  
% -----------

fprintf(fid,'GXYZ\n');

f=sprintf('%%%d.%df ',sig+5,sig-1);

for L=1:size(PhysGrid.Geom,1),
  fprintf(fid,[f,f,f,' /%d\n'],PhysGrid.Geom(L,:),L);
end

fprintf(fid,'XXXX\n');


% Desc(ription):
% --------------

fprintf(fid,'DNOD\n');

for L=1:size(PhysGrid.Desc,1),
  fprintf(fid,'%4d %4d  /%d\n',PhysGrid.Desc(L,:),L);
end

fprintf(fid,'XXXX\n');


% Freq(uency):
% ------------

fprintf(fid,'FREQ(');

AsapFprintf(fid,sig,Freq/1e6);  % frequency in MHz!

fprintf(fid,')\n');


% Feed:
% -----

if ~exist('FeedNum','var')||isempty(FeedNum),
  FeedNum='all';
end
  
[V,q0,q1]=GetFeedVolt(PhysGrid,FeedNum);
V0=V(1:length(q0));
V1=V(1+length(q0):end);

if ~isempty(q0),
  fprintf(fid,'FEED(');
  N=find(V0~=0);
  for L=N(:).',
    fprintf(fid,'%d,',q0(L));
    AsapFprintf(fid,sig,abs(V0(L)));
    fprintf(fid,',');
    AsapFprintf(fid,sig,angle(V0(L))/deg);
    if L==N(end),
      fprintf(fid,')\n');
    else
      fprintf(fid,'/\n');
    end
  end
end
  
if ~isempty(q1),
  fprintf(fid,'GENE(');
  N=find(V1~=0);
  for L=N(:).',
    fprintf(fid,'%d,',q1(L));
    AsapFprintf(fid,sig,abs(V1(L)));
    fprintf(fid,',');
    AsapFprintf(fid,sig,angle(V1(L))/deg);
    if L==N(end),
      fprintf(fid,')\n');
    else
      fprintf(fid,'/\n');
    end
  end
end


% Load:
% -----

try
  q=PhysGrid.Geom_.Loads;
  Z=PhysGrid.Geom_.Z;
catch
  q=[];
end
if ~isempty(q),
  fprintf(fid,'LOAD(');
  N=length(q);
  for L=1:N,
    fprintf(fid,'%d,',q(L));
    AsapFprintf(fid,sig,abs(Z(L)));
    fprintf(fid,',');
    AsapFprintf(fid,sig,angle(Z(L))/deg);
    if L==N,
      fprintf(fid,')\n');
    else
      fprintf(fid,'/\n');
    end
  end
end
  
try
  q=PhysGrid.Desc_.Loads;
  Z=PhysGrid.Desc_.Z;
catch
  q=[];
end
if ~isempty(q),
  fprintf(fid,'IMPE(');
  N=length(q);
  for L=1:N,
    fprintf(fid,'%d,',q(L));
    AsapFprintf(fid,sig,abs(Z(L)));
    fprintf(fid,',');
    AsapFprintf(fid,sig,angle(Z(L))/deg);
    if L==N,
      fprintf(fid,')\n');
    else
      fprintf(fid,'/\n');
    end
  end
end


% Exte(rior medium):
% ------------------

try
  epsr=EvaluateFun(PhysGrid.Exterior.epsr,Freq);
  %mu=EvaluateFun(PhysGrid.Exterior.mu,mu);
catch
  epsr=[];
end

if ~isempty(epsr),
  
  Cond=-imag(eps0*PhysGrid.Exterior.epsr)*2*pi*Freq;
  Reepsr=real(PhysGrid.Exterior.epsr);

  fprintf(fid,'EXTE(COND=');
  AsapFprintf(fid,sig,Cond); % conductivity in S/m!

  fprintf(fid,'/DIEL=');
  AsapFprintf(fid,sig,Reepsr);

  fprintf(fid,')\n');

end


% Inte(rvals) for integration:
% ----------------------------

q=PhysGrid.Default.ASAP.Inte;  % number of integration steps for simpson rule (~100)

fprintf(fid,'INTE(%d)\n',q);


% additional optional cards:
% --------------------------

if ~isempty(AddCards),
  
  if ischar(AddCards),
    AddCards=cellstr(AddCards);
  end
  
  for L=AddCards(:).',
    fprintf(fid,'%s\n',L{:});
  end

end
  

% output request and stop card:
% -----------------------------

fprintf(fid,'OUTPUT(CURRENT)\n');
fprintf(fid,'STOP\n\n');


% Trailer:
% --------

fprintf(fid,'C      ============================================\n'); 
fprintf(fid,'C      ASAP input file created %s\n',datestr(now));
fprintf(fid,'C      by Asap_CreateIn.m (MATLAB Toolbox)\n');


% close completed ASAP input file:
% --------------------------------

s=fclose(fid);
if s<0,
  error(['Could not close file ',AIF]);
end

end

%-------------------------------

function c=AsapFprintf(fid,s,x)

% c=AsapFprintf(fid,s,x) prints number x in ASAP format to the text
% file associated with file identifier fid, using s significant 
% decimals (1<=s<=9, as ASAP can correctly read only up to 9 digits
% per number). The number of written bytes is returned in c.

% number of significant digits:

s=max(round(s),1);
if s>9,
  error('Too many significant decimals requested.');
end

% conversion to exponential string-format:

xs=sprintf(sprintf('%%.%de',s-1),x);

% exponent:

e=str2double(xs(strfind(xs,'e')+1:end));
if e>11,
  error('Number too large to be printed in ASAP format.');
end

% minimum shift-left q, so that a maximum of 9 digits is
% printed (ASAP cannot read more than 9 digits to represent
% a number because long integers are used to store its basis 
% and no exponent identifier e... can be given):

q=max(s-e-9,0); 
if q>6,
  error('Number too small to be printed in ASAP format.');
end

% print x using K, M or U postfix if necessary:

if e>5,
  
  % K postfix
  f=sprintf('%%.%df',max(s-1-e+3,0));
  c=fprintf(fid,[f,'K'],x/1e3);
  
elseif (e<-5)||(q>3),  
  
  % U postfix
  f=sprintf('%%.%df',max(s-1-e-6,0));
  c=fprintf(fid,[f,'U'],x*1e6);
  
elseif (e<-2)||(q>0),  
  
  % M postfix
  f=sprintf('%%.%df',max(s-1-e-3,0));
  c=fprintf(fid,[f,'M'],x*1e3);
  
else  
  
  % no postfix
  f=sprintf('%%.%df',max(s-1-e,0));
  c=fprintf(fid,f,x);
  
end

end

============================================================

function Op=Asap_Curr(PhysGrid,Freq,FeedNum,WorkingDir,Titel,AddCards)

% Op=Asap_Curr(PhysGrid,Freq,FeedNum,WorkingDir,Titel) uses ASAP to
% calculate currents on antenna grid PhysGrid when driven at the 
% frequency Freq as specified by FeedNum. Titel defines a comment 
% added at the beginning of the ASAP input and output files.
% The calculations are done in the directory WorkingDir (default is
% the current directory).

if ~exist('Titel','var')||isempty(Titel),
  Titel='';
end

if ~exist('AddCards','var')||isempty(AddCards),
  AddCards='';
end

if ~exist('WorkingDir','var')||isempty(WorkingDir),
  WorkingDir='';
end

Asap_CreateIn(PhysGrid,Freq,FeedNum,Titel,WorkingDir,AddCards);

Asap_Call(WorkingDir);

Op=Asap_ReadOut(WorkingDir);


============================================================

function AA=Asap_FarA(Grid,Op,er)

% AA=Asap_FarA(Grid,Op,er) calculates vector potential in the far zone
% generated by the currents excited on the given antenna system.
% Actually, AA is the vector potential A apart from the factor
% exp(-jkr)/r:
%
%   AA = mu/(4*pi) Int I(r') exp(j*k*er.r') ds'

CountSegs=[];

if ~isequal(size(Op),[1,1]),
  error('Non-scalar Op structs not allowed.');
end

[k,epsilon,mu]=Kepsmu(Op.Freq,Grid);

er=er./repmat(Mag(er,2),[1,3]);  % ensure unit vectors

nr=size(er,1);
AA=zeros(nr,3);

ns=size(Grid.Desc,1);

if ~exist('CountSegs','var')||isempty(CountSegs),
  if nr>ns/2,
    CountSegs=1;
  else
    CountSegs=0;
  end
end

if CountSegs,
  
  for s=1:ns,

    r1=Grid.Geom(Grid.Desc(s,1),:);
    r2=Grid.Geom(Grid.Desc(s,2),:);
    L=Mag(r2-r1,2);           % Length of segment.
    ez=(r2-r1)./L;            % Unit vector in segment direction.
    x=er*ez.';
    y=Mag(cross(er,repmat(ez,[nr,1]),2),2);
    theta=atan2(y,x);         % angle between segment and er
    kL=k*L;
    x=kL.*sin(theta/2).^2;
    y=kL.*cos(theta/2).^2;

    I1=Op.Curr1(s,1);   % I(z1)
    I2=Op.Curr1(s,2);   % I(z2)

    n=find(x.*y);
    theta=zeros(size(x));
    theta(n)=(sin(x(n)).*y(n)-sin(y(n)).*x(n))./x(n)./y(n);
    n=find(x.*y==0);
    theta(n)=sinq(x(n))-sinq(y(n));

    theta=((I2+I1).*sin(kL/2).*(sinq(x)+sinq(y))+...
      j*(I2-I1).*cos(kL/2).*theta).*...
      L./sin(kL).*exp(er*(r1+r2).'*(k/2*j));

    AA=AA+theta*ez;
    
  end 
  
else  % ~CountSegs
  
  for d=1:nr,

    r1=Grid.Geom(Grid.Desc(:,1),:);
    r2=Grid.Geom(Grid.Desc(:,2),:);
    L=Mag(r2-r1,2);                 % Length of segment.
    ez=(r2-r1)./repmat(L,1,3);      % Unit vector in segment direction.
    x=ez*er(d,:).';
    y=Mag(cross(repmat(er(d,:),[ns,1]),ez,2),2);
    theta=atan2(y,x);               % angle between segment and er
    kL=k*L;
    x=kL.*sin(theta/2).^2;
    y=kL.*cos(theta/2).^2;

    I1=Op.Curr1(:,1);   % I(z1)
    I2=Op.Curr1(:,2);   % I(z2)

    n=find(x.*y);
    theta=zeros(size(x));
    theta(n)=(sin(x(n)).*y(n)-sin(y(n)).*x(n))./x(n)./y(n);
    n=find(x.*y==0);
    theta(n)=sinq(x(n))-sinq(y(n));

    theta=((I2+I1).*sin(kL/2).*(sinq(x)+sinq(y))+...
      j*(I2-I1).*cos(kL/2).*theta).*...
      L./sin(kL).*exp((r1+r2)*er(d,:).'*(k/2*j));

    AA(d,:)=theta.'*ez;
    
  end 
  
end

AA=AA*(mu/8/pi);


============================================================
 
function [AntGrid,Freq]=Asap_ReadIn(WorkingDir)

% [AntGrid,Freq]=Asap_ReadIn(WorkingDir) reads data from ASAP input file 
% which is defined in the global variable Atta_Asap_In (which is expected 
% in the directory WorkingDir) and returns it in the structure AntGrid 
% the following fields of which are returned:
%   Geom, Desc, 
%   Default.Wire.Diam, Default.Wire.Cond,
%   Geom_.Feeds, Desc_.Feeds,
%   Geom_.Loads, Desc_.Loads,
%   Exterior.epsr,
%   ASAP.Inte
%   
% The fields are filled when the corresponding data are found in the files.
% Additionally the frequancy is returned separately in the variable Freq.


% These are the ASAP input cards recognized by Asap_ReadIn:

CardSet={'WIRE','INSU','GEOM','GXYZ','DESC','DNOD',...
  'FREQ','FEED','GENE','LOAD','IMPE','EXTE','INTE','STOP','OUTPUT'};

global Atta_Asap_In

deg=pi/180;

cL=2.99792458e8;
eps0=1/(4e-7*pi*cL^2);

Freq=300e6;  % Default frequency;
epsr=1;      % default dielectric constant of ambient medium
Cond=0;      % default conductivity of ambient medium


% open file:
% ----------

if ~exist('WorkingDir','var')||isempty(WorkingDir),
  WorkingDir='';
end

AIF=fullfile(WorkingDir,Atta_Asap_In);

fid=fopen(AIF,'rt');
if fid<0,
  error(['Could not open file ',AIF]);
end


% MAIN LOOP:
% ----------

LineNum=0; 

while ~feof(fid),  
  
[Line,LineNum]=AsapFgetl(fid,LineNum);  
Card='';
for k=CardSet,
  p=strfind(Line,k{1});
  if ~isempty(p), 
    Card=k{1};
    Line=Line(p(1)+length(Card):end);
    break, 
  end
end
  
switch Card,

case 'WIRE',
  [d,du]=Sscann(Line,1);
  p=[];
  q=[];
  for k=1:min(length(d),2),
    if strfind(du{k},'RADI'),
      p=d(k);
    elseif strfind(du{k},'COND'),
      q=d(k);
    end
  end
  if isempty(p),
    AsapFerror(fid,...
      'Invalid WIRE card (no RADIUS defined).',LineNum);
  end
  if isempty(q),
    if length(d)>1,
      AsapFerror(fid,...
      'Invalid WIRE card encountered.',LineNum);
    else
      q=50;
    end
  elseif q<0, 
    q=inf;
  end
  AntGrid.Default.Wire.Diam=2*p;    % diameter=2*radius
  AntGrid.Default.Wire.Cond=q*1e6;  % Conductivity in MS/m -> in S/m
  
% insulation not implemented yet in this version  
% case 'INSU',
%   [d,du]=Sscann(Line,1);
%   p=[];
%   q=[];
%   r=[];
%   for k=1:min(length(d),3),
%     if strfind(du{k},'RADI'),
%       p=d(k);
%     elseif strfind(du{k},'COND'),
%       q=d(k);
%     elseif strfind(du{k},'DIEL'),
%       r=d(k);
%     end
%   end
%   if isempty(p)|isempty(q)|isempty(r),
%     AsapFerror(fid,'Invalid INSU card encountered.',LineNum);
%   end
%   AntGrid.Insu=[p,q,r];
  
case 'GEOM',
  p=[];
  q=[];
  while ischar(Line),
    p=strfind(Line,')');
    if ~isempty(p),
      Line=Line(1:p-1);
    end
    q=[q,Sscann(Line,1)];
    if ~isempty(p), break, end
    [Line,LineNum]=AsapFgetl(fid,LineNum);  
  end   
  if isempty(p),
    AsapFerror(fid,...
      'Unexpected end of file within GEOM card.',LineNum);
  end
  p=length(q);
  if mod(p,3) || isempty(q),
    AsapFerror(fid,...
      'Invalid number of coordinates in GEOM card.',LineNum);
  end
  AntGrid.Geom=reshape(q,3,p/3).';

case 'GXYZ',
  q=[];
  p=[];
  while ~feof(fid) && isempty(p),
    [Line,LineNum]=AsapFgetl(fid,LineNum);  
    d=sscanf(Line,'%f');
    if mod(length(d),3),
      AsapFerror(fid,...
        'Invalid number of coordinates in GXYZ card.',LineNum);
    elseif isempty(d),
      p=strfind(Line,'XXXX');
      if ~all(isspace(Line)) && isempty(p),
        AsapFerror(fid,'Invalid line in GXYZ card.',LineNum);
      end
    else
      q=[q;d.'];
    end
  end
  p=strfind(Line,'XXXX');
  if isempty(p) || isempty(q),
    AsapFerror(fid,...
      'Unexpected end of data within GXYZ card.',LineNum);
  end
  AntGrid.Geom=q;

case 'DESC',
  p=[];
  q=[];
  while ischar(Line),
    p=strfind(Line,')');
    if ~isempty(p),
      Line=Line(1:p-1);
    end
    q=[q,Sscann(Line,1)];
    if ~isempty(p), break, end
    [Line,LineNum]=AsapFgetl(fid,LineNum);  
  end   
  if isempty(p),
    AsapFerror(fid,...
      'Unexpected end of file within DESC card.',LineNum);
  end
  p=length(q);
  if mod(p,2) || isempty(q),
    AsapFerror(fid,...
      'Invalid number of coordinates in DESC card.',LineNum);
  end
  AntGrid.Desc=reshape(q,2,p/2).';

case 'DNOD',
  q=[];
  p=[];
  while ~feof(fid) && isempty(p),
    [Line,LineNum]=AsapFgetl(fid,LineNum);  
    d=sscanf(Line,'%f');
    if mod(length(d),2),
      AsapFerror(fid,...
        'Invalid number of coordinates in DNOD card.',LineNum);
    elseif isempty(d),
      p=strfind(Line,'XXXX');
      if ~all(isspace(Line)) && isempty(p),
        AsapFerror(fid,'Invalid line in DNOD card.',LineNum);
      end
    else
      q=[q;d.'];
    end
  end
  p=strfind(Line,'XXXX');
  if isempty(p) || isempty(q),
    AsapFerror(fid,...
      'Unexpected end of data within DNOD card.',LineNum);
  end
  AntGrid.Desc=q;

case 'FREQ',
  q=Sscann(Line,1);
  if isempty(q),
    AsapFerror(fid,'Invalid FREQ card encountered.',LineNum);
  end
  Freq=1e6*q(1);  % Frequency in MHz -> in Hz

case 'FEED',
  p=[];
  q=[];
  while ischar(Line),
    p=strfind(Line,')');
    if ~isempty(p),
      Line=Line(1:p-1);
    end
    q=[q,Sscann(Line,1)];
    if ~isempty(p), break, end
    [Line,LineNum]=AsapFgetl(fid,LineNum);  
  end   
  if isempty(p),
    AsapFerror(fid,...
      'Unexpected end of file within FEED card.',LineNum);
  end
  p=length(q);
  if ((p~=1) && mod(p,3)) || isempty(q),
    AsapFerror(fid,'Invalid FEED card encountered.',LineNum);
  end
  if p==1,
    AntGrid.Geom_.Feeds=q;
  else
    q=reshape(q,3,p/3).';
    AntGrid.Geom_.Feeds=q(:,1);
    AntGrid.Geom_.V=q(:,2).*exp(i*q(:,3)*deg);
  end
  
case 'GENE',
  p=[];
  q=[];
  while ischar(Line),
    p=strfind(Line,')');
    if ~isempty(p),
      Line=Line(1:p-1);
    end
    q=[q,Sscann(Line,1)];
    if ~isempty(p), break, end
    [Line,LineNum]=AsapFgetl(fid,LineNum);  
  end   
  if isempty(p),
    AsapFerror(fid,...
      'Unexpected end of file within GENE card.',LineNum);
  end
  p=length(q);
  if ((p~=1) && mod(p,3)) || isempty(q),
    AsapFerror(fid,'Invalid GENE card encountered.',LineNum);
  end
  if p==1,
    AntGrid.Desc_.Feeds=q;
  else
    q=reshape(q,3,p/3).';
    AntGrid.Desc_.Feeds=q(:,1);
    AntGrid.Desc_.V=q(:,2).*exp(i*q(:,3)*deg);
  end
  
case 'LOAD',
  p=[];
  q=[];
  while ischar(Line),
    p=strfind(Line,')');
    if ~isempty(p),
      Line=Line(1:p-1);
    end
    q=[q,Sscann(Line,1)];
    if ~isempty(p), break, end
    [Line,LineNum]=AsapFgetl(fid,LineNum);  
  end   
  if isempty(p),
    AsapFerror(fid,...
      'Unexpected end of file within LOAD card.',LineNum);
  end
  p=length(q);
  if mod(p,3) || isempty(q),
    AsapFerror(fid,'Invalid LOAD card encountered.',LineNum);
  end
  q=reshape(q,3,p/3).';
  AntGrid.Geom_.Loads=q(:,1);
  AntGrid.Geom_.Z=q(:,2).*exp(j*q(:,3)*deg);
  
case 'IMPE',
  p=[];
  q=[];
  while ischar(Line),
    p=strfind(Line,')');
    if ~isempty(p),
      Line=Line(1:p-1);
    end
    q=[q,Sscann(Line,1)];
    if ~isempty(p), break, end
    [Line,LineNum]=AsapFgetl(fid,LineNum);  
  end   
  if isempty(p),
    AsapFerror(fid,...
      'Unexpected end of file within IMPE card.',LineNum);
  end
  p=length(q);
  if mod(p,3) || isempty(q),
    AsapFerror(fid,'Invalid IMPE card encountered.',LineNum);
  end
  q=reshape(q,3,p/3).';
  AntGrid.Desc_.Loads=q(:,1);
  AntGrid.Desc_.Z=q(:,2).*exp(j*q(:,3)*deg);
  
case 'EXTE',
  [d,du]=Sscann(Line,1);
  p=[];
  q=[];
  for k=1:min(length(d),2),
    if strfind(du{k},'COND'),
      p=d(k);
    elseif strfind(du{k},'DIEL'),
      q=d(k);
    end
  end
  if isempty(p)||isempty(q),
    AsapFerror(fid,'Invalid EXTE card encountered.',LineNum);
  end
  epsr=q;
  Cond=p;

case 'INTE',
  q=Sscann(Line,1);
  if isempty(q),
    AsapFerror(fid,'Invalid INTE card encountered.',LineNum);
  end
  AntGrid.ASAP.Inte=q(1);
  
case 'STOP',
  break
  
otherwise
  if ~all(isspace(Line)) && isempty(Card),
    fprintf(1,'Warning: Asap_ReadIn cannot treat input line %d: %s\n',...
      LineNum,Line);
%    AsapFerror(fid,...
%      'Unknown ASAP input card encountered.',LineNum);
  end
 
end % of switch

end % of MAIN LOOP


AntGrid.Exterior.epsr=epsr+Cond/(j*2*pi*Freq*eps0);


p=fclose(fid);
if p<0,
  error(['Could not close file ',AIF]);
end


end  % of ASAP_ReadIn.m


%---------------------------------

function AsapFerror(fid,Err,L)

% Displays error message Err after closing the file associated 
% with fid. In addition the line number L is output.

Name=fopen(fid);

fclose(fid);

if nargin>2,
  fprintf(1,'\nASAP format error in line %d of ''%s''\n',L,Name);
end

error(Err);

end

%---------------------------------

function [L,N1]=AsapFgetl(fid,N)

% Read line from file associated with identifier fid,
% comment lines are returned empty, letters are modified to
% uppercase. The line number N is increased by 1. If end
% of file is reached, L=-1 is returned.

if nargin>1,
  N1=N+1;
else
  N1=1;
end

L=deblank(fgetl(fid));

if ~ischar(L),
  N1=N1-1;
  return
end

L=[upper(L),' '];

if (L(1)=='C') && isspace(L(2)),
  L='';
end

end

============================================================
 
function Op=Asap_ReadOut(WorkingDir)

% [Curr,Freq,Wire,epsr,Inte]
% Op=Asap_ReadOut(WorkingDir) reads data from ASAP output file,
% the filename of which is defined in the global variable Atta_Asap_Out,
% expected in the durectory WorkingDir.
% The returned parameters are:
%
%   Op.Reread.Freq           frequency
%   Op.Reread.Wire.Diam      wire diameter 
%   Op.Reread.Wire.Cond      wire conductivity 
%   Op.Reread.Exterior.epsr  dielectric constant of exterior medium 
%   Op.Reread.ASAP.Inte      number of intervals for simpson integration
%   Op.Curr1                 the currents: s x 2 matrix for s segments


global Atta_Asap_Out

cL=2.99792458e8;
eps0=1/(4e-7*pi*cL^2);


% open file:

if ~exist('WorkingDir','var')||isempty(WorkingDir),
  WorkingDir='';
end

AOF=fullfile(WorkingDir,Atta_Asap_Out);

fid=fopen(AOF,'rt');
if fid<0,
  error(['Could not open file ',AOF]);
end


% initialize parameters:

Param={'FREQUENCY (MHZ)',...
       'WIRE RADIUS (METERS)',...
       'WIRE CONDUCTIVITY (MEGAMHOS/METER)',...
       'EXTERIOR MEDIUM CONDUCTIVITY (MHOS/METER)',...
       'EXTERIOR MEDIUM DIELECTRIC CONSTANT (RELATIVE)',...
       'IF CLOSED FORM INTEGRATION IS REQUIRED',...
       'ANTENNA BRANCH CURRENTS'};

Freq=nan;
Wire.Diam=nan;
Wire.Cond=nan;
Cond=nan;
epsr=nan;
Inte=nan;
Curr=zeros(10000,2);
     

% search for end of input data cards:

LineNum=0; 

while ~feof(fid),
  [Line,LineNum]=AsapFgetl(fid,LineNum);
  if isequal(Line(1:min(1,length(Line))),'0'),
    break, 
  end
end


% Parameters Loop:

CurrFound=false;

while ~feof(fid)&&~CurrFound,
  [Line,LineNum]=AsapFgetl(fid,LineNum);
  for p=1:length(Param),
    n=strfind(upper(Line),Param{p});
    if ~isempty(n),
      n=n(end)+length(Param{p});
      switch p,
        case 1,
          Freq=sscanf(Line(n:end),'%f',1)*1e6;
        case 2,
          Wire.Diam=2*sscanf(Line(n:end),'%f',1);
        case 3,
          Wire.Cond=sscanf(Line(n:end),'%f',1)*1e6;
          if Wire.Cond<=0,
            Wire.Cond=inf;
          end
        case 4,
          Cond=sscanf(Line(n:end),'%f',1);
        case 5,
          epsr=sscanf(Line(n:end),'%f',1);
        case 6,
          Inte=sscanf(Line,'%f',1);
        case length(Param),
          CurrFound=1;
      end                       
    end
  end
end
  
if isnan(Freq)||isnan(Wire.Diam)||isnan(Wire.Cond)||...
   isnan(Cond)||isnan(epsr)||isnan(Inte),
  error('Not all parameters correctly determined from ASAP output file.');
end

epsr=epsr+Cond/(j*2*pi*Freq*eps0);
  

% Currents loop:

s=0;

while ~feof(fid),
  [Line,LineNum]=AsapFgetl(fid,LineNum);
  p=strfind(Line,'**');
  if ~isempty(p),
    Line(p)='1';
    Line(p+1)='1';
  end
  cu=sscanf(Line,'%f');
  if length(cu)==13,
    s=s+1;
    Curr(s,:)=[cu(3)+j*cu(4),cu(9)+j*cu(10)];
  elseif isequal(Line(1:min(1,length(Line))),'0'),
    break
  end
end

if s==0,
  AsapFerror(fid,'No current data found.',LineNum);
end      

if ~isequal(Line(1:min(1,length(Line))),'0'),
  warning('Encountered end of file while reading currents.')
end

% close file:

p=fclose(fid);
if p<0,
  error(['Could not close file ',AOF]);
end

% return parameters in Op struct:

Op.Reread.Freq=Freq;
Op.Reread.Wire=Wire;
Op.Reread.Exterior.epsr=epsr;
Op.Reread.ASAP.Inte=Inte;
Op.Curr1=Curr(1:s,:);


end % of ASAP_ReadOut.m


%-------------------------------
function AsapFerror(fid,Err,L)

% Displays error message Err after closing the file associated 
% with fid. In addition the line number L is output.
% The function is used by AsapRead.

Name=fopen(fid);

fclose(fid);

if nargin>2,
  fprintf(1,'\nASAP format error in line %d of ''%s''\n',L,Name);
end

error(Err);

end

%-------------------------------
function [L,N1]=AsapFgetl(fid,N)

% Read line from file associated with identifier fid,
% comment lines are returned empty, letters are modified to
% uppercase. The line number N is increased by 1. If end
% of file is reached, L=-1 is returned.
% This function is used by AsapRead.

if nargin>1,
  N1=N;
else
  N1=1;
end

L='';

if feof(fid),
  return
end

L=deblank(fgetl(fid));

N1=N1+1;

if ~ischar(L),
  return
end

L=[upper(L),' '];

if (L(1)=='C') && isspace(L(2)),
  L='';
end

end

============================================================

function [N,A]=Sscann(S,AsapFormat)
 
% [N,A]=Sscann(S,AsapFormat) splits the string S into several
% parts, which are returned in A and N, where A is a cell
% array containing the alpha- or non-numeric parts and 
% N is a vector containing the numbers found in S.
% If S starts with a number, A{1} is set to '' (empty
% string); similarly if S ends with a number, A(end)='';
% so length(A)=length(N)+1, and S is decomposed into A  
% and N in this way: A{1},N(1),...,A(nn),N(nn),A(nn+1), 
% where nn=length(N) is the number of numeric values found.
% Set the optional argument AsapFormat=1 in order to read 
% ASAP-formatted numbers, i.e. K, M and U can be used 
% as Kilo-, Milli- and Micro-postfix, respectively.

N=[];
A={};

AA=S;  % dummy for A{end}
k=0;   % length of AA-content
p=1;   % pointer into S

while p<=length(S),
  if any(S(p)=='+-.0123456789'),
    [q,c,e,pp]=sscanf(S(p:end),'%f',1);
    if isempty(q),
      k=k+1;
      AA(k)=S(p);
      p=p+1;
    else
      N(end+1)=q;
      A{end+1}=AA(1:k);
      k=0;
      p=p+pp-1;
    end
  else 
    k=k+1;
    AA(k)=S(p);
    p=p+1;
  end
end

A{end+1}=AA(1:k);

% take into account ASAP-formatted numbers:

if nargin>1,
  if isequal(AsapFormat,1),
    for p=1:length(N),
      pp=p+1;
      c=A{pp}(1:min(1,end));
      switch upper(c),
      case 'K',
        N(p)=N(p)*1e3;
        A{pp}=A{pp}(2:end);
      case 'M',
        N(p)=N(p)/1e3;
        A{pp}=A{pp}(2:end);
      case 'U',
        N(p)=N(p)/1e6;
        A{pp}=A{pp}(2:end);
      end 
    end
  end
end

        
  
